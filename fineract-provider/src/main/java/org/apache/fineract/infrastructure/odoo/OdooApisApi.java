/*
 * Ledger Transactions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.fineract.infrastructure.odoo;

import org.apache.fineract.infrastructure.odoo.invoker.ApiCallback;
import org.apache.fineract.infrastructure.odoo.invoker.ApiClient;
import org.apache.fineract.infrastructure.odoo.invoker.ApiException;
import org.apache.fineract.infrastructure.odoo.invoker.ApiResponse;
import org.apache.fineract.infrastructure.odoo.invoker.Configuration;
import org.apache.fineract.infrastructure.odoo.invoker.Pair;
import org.apache.fineract.infrastructure.odoo.invoker.ProgressRequestBody;
import org.apache.fineract.infrastructure.odoo.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.apache.fineract.infrastructure.odoo.model.ErrorResponse;
import org.apache.fineract.infrastructure.odoo.model.LedgerAccount;
import org.apache.fineract.infrastructure.odoo.model.SuccessResponse;
import org.apache.fineract.infrastructure.odoo.model.TransactionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OdooApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OdooApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OdooApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for odooGetAccounts1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved account details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call odooGetAccounts1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ledger/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call odooGetAccounts1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return odooGetAccounts1Call(_callback);

    }

    /**
     * Retrieve ledger account details
     * 
     * @return List&lt;LedgerAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved account details. </td><td>  -  </td></tr>
     </table>
     */
    public List<LedgerAccount> odooGetAccounts1() throws ApiException {
        ApiResponse<List<LedgerAccount>> localVarResp = odooGetAccounts1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve ledger account details
     * 
     * @return ApiResponse&lt;List&lt;LedgerAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved account details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LedgerAccount>> odooGetAccounts1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = odooGetAccounts1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<LedgerAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve ledger account details (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved account details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call odooGetAccounts1Async(final ApiCallback<List<LedgerAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = odooGetAccounts1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<LedgerAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for odooPostLedger1
     * @param transactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call odooPostLedger1Call(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/ledger/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call odooPostLedger1ValidateBeforeCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionRequest' is set
        if (transactionRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionRequest' when calling odooPostLedger1(Async)");
        }

        return odooPostLedger1Call(transactionRequest, _callback);

    }

    /**
     * Create a new ledger transaction
     * 
     * @param transactionRequest  (required)
     * @return SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public SuccessResponse odooPostLedger1(TransactionRequest transactionRequest) throws ApiException {
        ApiResponse<SuccessResponse> localVarResp = odooPostLedger1WithHttpInfo(transactionRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new ledger transaction
     * 
     * @param transactionRequest  (required)
     * @return ApiResponse&lt;SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuccessResponse> odooPostLedger1WithHttpInfo(TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = odooPostLedger1ValidateBeforeCall(transactionRequest, null);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new ledger transaction (asynchronously)
     * 
     * @param transactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call odooPostLedger1Async(TransactionRequest transactionRequest, final ApiCallback<SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = odooPostLedger1ValidateBeforeCall(transactionRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for odooPutLedger1
     * @param transactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call odooPutLedger1Call(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/ledger/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call odooPutLedger1ValidateBeforeCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionRequest' is set
        if (transactionRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionRequest' when calling odooPutLedger1(Async)");
        }

        return odooPutLedger1Call(transactionRequest, _callback);

    }

    /**
     * Update an existing ledger transaction
     * 
     * @param transactionRequest  (required)
     * @return SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public SuccessResponse odooPutLedger1(TransactionRequest transactionRequest) throws ApiException {
        ApiResponse<SuccessResponse> localVarResp = odooPutLedger1WithHttpInfo(transactionRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing ledger transaction
     * 
     * @param transactionRequest  (required)
     * @return ApiResponse&lt;SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuccessResponse> odooPutLedger1WithHttpInfo(TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = odooPutLedger1ValidateBeforeCall(transactionRequest, null);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing ledger transaction (asynchronously)
     * 
     * @param transactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request has been successfully logged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to log transaction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call odooPutLedger1Async(TransactionRequest transactionRequest, final ApiCallback<SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = odooPutLedger1ValidateBeforeCall(transactionRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
