<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership. The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.3.xsd">
    <changeSet id="fix_m_appuser_column-is_deleted" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'is_deleted'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_is_deleted SMALLINT;
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_is_deleted = is_deleted where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN is_deleted DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN is_deleted TYPE BOOLEAN
            USING CASE
            WHEN is_deleted = 0 THEN false
            WHEN is_deleted = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET is_deleted = CASE
            WHEN temp_is_deleted = 0 THEN false
            WHEN temp_is_deleted = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_is_deleted;
        </sql>

    </changeSet>
    <changeSet id="fix_m_appuser_column-firsttime_login_remaining" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'firsttime_login_remaining'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_firsttime_login_remaining bit varying(1);
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_firsttime_login_remaining = firsttime_login_remaining WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN firsttime_login_remaining DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN firsttime_login_remaining TYPE BOOLEAN
            USING CASE
            WHEN firsttime_login_remaining = '0' THEN false
            WHEN firsttime_login_remaining = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET firsttime_login_remaining = CASE
            WHEN temp_firsttime_login_remaining = '0' THEN false
            WHEN temp_firsttime_login_remaining = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_firsttime_login_remaining;
        </sql>
    </changeSet>
    <changeSet id="fix_m_appuser_column-nonexpired" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'nonexpired'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_nonexpired bit varying(1);
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_nonexpired = nonexpired WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN nonexpired DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN nonexpired TYPE BOOLEAN
            USING CASE
            WHEN nonexpired = '0' THEN false
            WHEN nonexpired = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET nonexpired = CASE
            WHEN temp_nonexpired = '0' THEN false
            WHEN temp_nonexpired = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_nonexpired;
        </sql>
    </changeSet>
    <changeSet id="fix_m_appuser_column-nonlocked" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'nonlocked'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_nonlocked bit varying(1);
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_nonlocked = nonlocked WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN nonlocked DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN nonlocked TYPE BOOLEAN
            USING CASE
            WHEN nonlocked = '0' THEN false
            WHEN nonlocked = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET nonlocked = CASE
            WHEN temp_nonlocked = '0' THEN false
            WHEN temp_nonlocked = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_nonlocked;
        </sql>
    </changeSet>
    <changeSet id="fix_m_appuser_column-nonexpired_credentials" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'nonexpired_credentials'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_nonexpired_credentials bit varying(1);
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_nonexpired_credentials = nonexpired_credentials WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN nonexpired_credentials DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN nonexpired_credentials TYPE BOOLEAN
            USING CASE
            WHEN nonexpired_credentials = '0' THEN false
            WHEN nonexpired_credentials = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET nonexpired_credentials = CASE
            WHEN temp_nonexpired_credentials = '0' THEN false
            WHEN temp_nonexpired_credentials = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_nonexpired_credentials;
        </sql>
    </changeSet>
    <changeSet id="fix_m_appuser_column-enabled" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'enabled'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_enabled bit varying(1);
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_enabled = enabled WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN enabled DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN enabled TYPE BOOLEAN
            USING CASE
            WHEN enabled = '0' THEN false
            WHEN enabled = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET enabled = CASE
            WHEN temp_enabled = '0' THEN false
            WHEN temp_enabled = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_enabled;
        </sql>
    </changeSet>
    <changeSet id="fix_m_appuser_column-password_never_expires" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'password_never_expires'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_password_never_expires SMALLINT;
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_password_never_expires = password_never_expires where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN password_never_expires DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN password_never_expires TYPE BOOLEAN
            USING CASE
            WHEN password_never_expires = 0 THEN false
            WHEN password_never_expires = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET password_never_expires = CASE
            WHEN temp_password_never_expires = 0 THEN false
            WHEN temp_password_never_expires = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_password_never_expires;
        </sql>

    </changeSet>
    <changeSet id="fix_m_appuser_column-is_self_service_user" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'is_self_service_user'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_is_self_service_user bit varying(1);
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_is_self_service_user = is_self_service_user WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN is_self_service_user DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN is_self_service_user TYPE BOOLEAN
            USING CASE
            WHEN is_self_service_user = '0' THEN false
            WHEN is_self_service_user = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET is_self_service_user = CASE
            WHEN temp_is_self_service_user = '0' THEN false
            WHEN temp_is_self_service_user = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_is_self_service_user;
        </sql>
    </changeSet>
    <changeSet id="fix_m_appuser_column-cannot_change_password" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_appuser'
                AND column_name = 'cannot_change_password'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_appuser ADD COLUMN temp_cannot_change_password SMALLINT;
        </sql>
        <sql>
            UPDATE m_appuser
            SET temp_cannot_change_password = cannot_change_password where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser ALTER COLUMN cannot_change_password DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_appuser
            ALTER COLUMN cannot_change_password TYPE BOOLEAN
            USING CASE
            WHEN cannot_change_password = 0 THEN false
            WHEN cannot_change_password = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_appuser
            SET cannot_change_password = CASE
            WHEN temp_cannot_change_password = 0 THEN false
            WHEN temp_cannot_change_password = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_appuser DROP COLUMN temp_cannot_change_password;
        </sql>

    </changeSet>

    <changeSet id="fix_m_client_column-is_staff" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_client'
                AND column_name = 'is_staff'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_client ADD COLUMN temp_is_staff SMALLINT;
        </sql>
        <sql>
            UPDATE m_client
            SET temp_is_staff = is_staff where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client ALTER COLUMN is_staff DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_client
            ALTER COLUMN is_staff TYPE BOOLEAN
            USING CASE
            WHEN is_staff = 0 THEN false
            WHEN is_staff = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_client
            SET is_staff = CASE
            WHEN temp_is_staff = 0 THEN false
            WHEN temp_is_staff = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client DROP COLUMN temp_is_staff;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_accounting_rule_column-allow_multiple_debits" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_accounting_rule'
                AND column_name = 'allow_multiple_debits'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_accounting_rule ADD COLUMN temp_allow_multiple_debits SMALLINT;
        </sql>
        <sql>
            UPDATE acc_accounting_rule
            SET temp_allow_multiple_debits = allow_multiple_debits where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule ALTER COLUMN allow_multiple_debits DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule
            ALTER COLUMN allow_multiple_debits TYPE BOOLEAN
            USING CASE
            WHEN allow_multiple_debits = 0 THEN false
            WHEN allow_multiple_debits = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_accounting_rule
            SET allow_multiple_debits = CASE
            WHEN temp_allow_multiple_debits = 0 THEN false
            WHEN temp_allow_multiple_debits = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule DROP COLUMN temp_allow_multiple_debits;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_accounting_rule_column-allow_multiple_credits" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_accounting_rule'
                AND column_name = 'allow_multiple_credits'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_accounting_rule ADD COLUMN temp_allow_multiple_credits SMALLINT;
        </sql>
        <sql>
            UPDATE acc_accounting_rule
            SET temp_allow_multiple_credits = allow_multiple_credits where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule ALTER COLUMN allow_multiple_credits DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule
            ALTER COLUMN allow_multiple_credits TYPE BOOLEAN
            USING CASE
            WHEN allow_multiple_credits = 0 THEN false
            WHEN allow_multiple_credits = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_accounting_rule
            SET allow_multiple_credits = CASE
            WHEN temp_allow_multiple_credits = 0 THEN false
            WHEN temp_allow_multiple_credits = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule DROP COLUMN temp_allow_multiple_credits;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_accounting_rule_column-system_defined" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_accounting_rule'
                AND column_name = 'system_defined'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_accounting_rule ADD COLUMN temp_system_defined SMALLINT;
        </sql>
        <sql>
            UPDATE acc_accounting_rule
            SET temp_system_defined = system_defined where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule ALTER COLUMN system_defined DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule
            ALTER COLUMN system_defined TYPE BOOLEAN
            USING CASE
            WHEN system_defined = 0 THEN false
            WHEN system_defined = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_accounting_rule
            SET system_defined = CASE
            WHEN temp_system_defined = 0 THEN false
            WHEN temp_system_defined = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_accounting_rule DROP COLUMN temp_system_defined;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_account_column-disabled" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_account'
                AND column_name = 'disabled'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_account ADD COLUMN temp_disabled SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET temp_disabled = disabled where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account ALTER COLUMN disabled DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account
            ALTER COLUMN disabled TYPE BOOLEAN
            USING CASE
            WHEN disabled = 0 THEN false
            WHEN disabled = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET disabled = CASE
            WHEN temp_disabled = 0 THEN false
            WHEN temp_disabled = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account DROP COLUMN temp_disabled;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_account_column-manual_journal_entries_allowed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_account'
                AND column_name = 'manual_journal_entries_allowed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_account ADD COLUMN temp_manual_journal_entries_allowed SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET temp_manual_journal_entries_allowed = manual_journal_entries_allowed where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account ALTER COLUMN manual_journal_entries_allowed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account
            ALTER COLUMN manual_journal_entries_allowed TYPE BOOLEAN
            USING CASE
            WHEN manual_journal_entries_allowed = 0 THEN false
            WHEN manual_journal_entries_allowed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET manual_journal_entries_allowed = CASE
            WHEN temp_manual_journal_entries_allowed = 0 THEN false
            WHEN temp_manual_journal_entries_allowed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account DROP COLUMN temp_manual_journal_entries_allowed;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_account_column-account_usage" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_account'
                AND column_name = 'account_usage'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_account ADD COLUMN temp_account_usage SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET temp_account_usage = account_usage where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account ALTER COLUMN account_usage DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account
            ALTER COLUMN account_usage TYPE BOOLEAN
            USING CASE
            WHEN account_usage = 0 THEN false
            WHEN account_usage = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET account_usage = CASE
            WHEN temp_account_usage = 0 THEN false
            WHEN temp_account_usage = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account DROP COLUMN temp_account_usage;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_account_column-classification_enum" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_account'
                AND column_name = 'classification_enum'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_account ADD COLUMN temp_classification_enum SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET temp_classification_enum = classification_enum where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account ALTER COLUMN classification_enum DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account
            ALTER COLUMN classification_enum TYPE BOOLEAN
            USING CASE
            WHEN classification_enum = 0 THEN false
            WHEN classification_enum = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_account
            SET classification_enum = CASE
            WHEN temp_classification_enum = 0 THEN false
            WHEN temp_classification_enum = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_account DROP COLUMN temp_classification_enum;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_financial_activity_account_column-financial_activity_type" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_financial_activity_account'
                AND column_name = 'financial_activity_type'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_financial_activity_account ADD COLUMN temp_financial_activity_type SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_financial_activity_account
            SET temp_financial_activity_type = financial_activity_type where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_financial_activity_account ALTER COLUMN financial_activity_type DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_financial_activity_account
            ALTER COLUMN financial_activity_type TYPE BOOLEAN
            USING CASE
            WHEN financial_activity_type = 0 THEN false
            WHEN financial_activity_type = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_financial_activity_account
            SET financial_activity_type = CASE
            WHEN temp_financial_activity_type = 0 THEN false
            WHEN temp_financial_activity_type = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_financial_activity_account DROP COLUMN temp_financial_activity_type;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_journal_entry_column-reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_journal_entry'
                AND column_name = 'reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_journal_entry ADD COLUMN temp_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET temp_reversed = reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry ALTER COLUMN reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry
            ALTER COLUMN reversed TYPE BOOLEAN
            USING CASE
            WHEN reversed = 0 THEN false
            WHEN reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET reversed = CASE
            WHEN temp_reversed = 0 THEN false
            WHEN temp_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry DROP COLUMN temp_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_journal_entry_column-manual_entry" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_journal_entry'
                AND column_name = 'manual_entry'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_journal_entry ADD COLUMN temp_manual_entry SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET temp_manual_entry = manual_entry where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry ALTER COLUMN manual_entry DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry
            ALTER COLUMN manual_entry TYPE BOOLEAN
            USING CASE
            WHEN manual_entry = 0 THEN false
            WHEN manual_entry = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET manual_entry = CASE
            WHEN temp_manual_entry = 0 THEN false
            WHEN temp_manual_entry = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry DROP COLUMN temp_manual_entry;
        </sql>

    </changeSet>

    <changeSet id="fix_acc_gl_journal_entry_column-type_enum" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_journal_entry'
                AND column_name = 'type_enum'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_journal_entry ADD COLUMN temp_type_enum SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET temp_type_enum = type_enum where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry ALTER COLUMN type_enum DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry
            ALTER COLUMN type_enum TYPE BOOLEAN
            USING CASE
            WHEN type_enum = 0 THEN false
            WHEN type_enum = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET type_enum = CASE
            WHEN temp_type_enum = 0 THEN false
            WHEN temp_type_enum = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry DROP COLUMN temp_type_enum;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_journal_entry_column-entity_type_enum" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_journal_entry'
                AND column_name = 'entity_type_enum'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_journal_entry ADD COLUMN temp_entity_type_enum SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET temp_entity_type_enum = entity_type_enum where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry ALTER COLUMN entity_type_enum DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry
            ALTER COLUMN entity_type_enum TYPE BOOLEAN
            USING CASE
            WHEN entity_type_enum = 0 THEN false
            WHEN entity_type_enum = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET entity_type_enum = CASE
            WHEN temp_entity_type_enum = 0 THEN false
            WHEN temp_entity_type_enum = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry DROP COLUMN temp_entity_type_enum;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_gl_journal_entry_column-is_running_balance_calculated" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_gl_journal_entry'
                AND column_name = 'is_running_balance_calculated'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_gl_journal_entry ADD COLUMN temp_is_running_balance_calculated SMALLINT;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET temp_is_running_balance_calculated = is_running_balance_calculated where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry ALTER COLUMN is_running_balance_calculated DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry
            ALTER COLUMN is_running_balance_calculated TYPE BOOLEAN
            USING CASE
            WHEN is_running_balance_calculated = 0 THEN false
            WHEN is_running_balance_calculated = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_gl_journal_entry
            SET is_running_balance_calculated = CASE
            WHEN temp_is_running_balance_calculated = 0 THEN false
            WHEN temp_is_running_balance_calculated = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_gl_journal_entry DROP COLUMN temp_is_running_balance_calculated;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_product_mapping_column-product_type" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_product_mapping'
                AND column_name = 'product_type'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_product_mapping ADD COLUMN temp_product_type SMALLINT;
        </sql>
        <sql>
            UPDATE acc_product_mapping
            SET temp_product_type = product_type where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_product_mapping ALTER COLUMN product_type DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_product_mapping
            ALTER COLUMN product_type TYPE BOOLEAN
            USING CASE
            WHEN product_type = 0 THEN false
            WHEN product_type = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_product_mapping
            SET product_type = CASE
            WHEN temp_product_type = 0 THEN false
            WHEN temp_product_type = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_product_mapping DROP COLUMN temp_product_type;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_product_mapping_column-financial_account_type" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_product_mapping'
                AND column_name = 'financial_account_type'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_product_mapping ADD COLUMN temp_financial_account_type SMALLINT;
        </sql>
        <sql>
            UPDATE acc_product_mapping
            SET temp_financial_account_type = financial_account_type where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_product_mapping ALTER COLUMN financial_account_type DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_product_mapping
            ALTER COLUMN financial_account_type TYPE BOOLEAN
            USING CASE
            WHEN financial_account_type = 0 THEN false
            WHEN financial_account_type = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_product_mapping
            SET financial_account_type = CASE
            WHEN temp_financial_account_type = 0 THEN false
            WHEN temp_financial_account_type = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_product_mapping DROP COLUMN temp_financial_account_type;
        </sql>

    </changeSet>
    <changeSet id="fix_acc_rule_tags_column-acc_type_enum" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'acc_rule_tags'
                AND column_name = 'acc_type_enum'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE acc_rule_tags ADD COLUMN temp_acc_type_enum SMALLINT;
        </sql>
        <sql>
            UPDATE acc_rule_tags
            SET temp_acc_type_enum = acc_type_enum where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_rule_tags ALTER COLUMN acc_type_enum DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE acc_rule_tags
            ALTER COLUMN acc_type_enum TYPE BOOLEAN
            USING CASE
            WHEN acc_type_enum = 0 THEN false
            WHEN acc_type_enum = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE acc_rule_tags
            SET acc_type_enum = CASE
            WHEN temp_acc_type_enum = 0 THEN false
            WHEN temp_acc_type_enum = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE acc_rule_tags DROP COLUMN temp_acc_type_enum;
        </sql>

    </changeSet>
    <changeSet id="fix_glim_accounts_column-accepting_child" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'glim_accounts'
                AND column_name = 'accepting_child'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE glim_accounts ADD COLUMN temp_accepting_child SMALLINT;
        </sql>
        <sql>
            UPDATE glim_accounts
            SET temp_accepting_child = accepting_child where id > 0;
        </sql>
        <sql>
            ALTER TABLE glim_accounts ALTER COLUMN accepting_child DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE glim_accounts
            ALTER COLUMN accepting_child TYPE BOOLEAN
            USING CASE
            WHEN accepting_child = 0 THEN false
            WHEN accepting_child = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE glim_accounts
            SET accepting_child = CASE
            WHEN temp_accepting_child = 0 THEN false
            WHEN temp_accepting_child = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE glim_accounts DROP COLUMN temp_accepting_child;
        </sql>

    </changeSet>
    <changeSet id="fix_gsim_accounts_column-accepting_child" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'gsim_accounts'
                AND column_name = 'accepting_child'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE gsim_accounts ADD COLUMN temp_accepting_child SMALLINT;
        </sql>
        <sql>
            UPDATE gsim_accounts
            SET temp_accepting_child = accepting_child where id > 0;
        </sql>
        <sql>
            ALTER TABLE gsim_accounts ALTER COLUMN accepting_child DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE gsim_accounts
            ALTER COLUMN accepting_child TYPE BOOLEAN
            USING CASE
            WHEN accepting_child = 0 THEN false
            WHEN accepting_child = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE gsim_accounts
            SET accepting_child = CASE
            WHEN temp_accepting_child = 0 THEN false
            WHEN temp_accepting_child = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE gsim_accounts DROP COLUMN temp_accepting_child;
        </sql>

    </changeSet>
    <changeSet id="fix_m_account_transfer_transaction_column-is_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_account_transfer_transaction'
                AND column_name = 'is_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_account_transfer_transaction ADD COLUMN temp_is_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_account_transfer_transaction
            SET temp_is_reversed = is_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_account_transfer_transaction ALTER COLUMN is_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_account_transfer_transaction
            ALTER COLUMN is_reversed TYPE BOOLEAN
            USING CASE
            WHEN is_reversed = 0 THEN false
            WHEN is_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_account_transfer_transaction
            SET is_reversed = CASE
            WHEN temp_is_reversed = 0 THEN false
            WHEN temp_is_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_account_transfer_transaction DROP COLUMN temp_is_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_adhoc_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_adhoc'
                AND column_name = 'is_active'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_adhoc ADD COLUMN temp_is_active bit varying(1);
        </sql>
        <sql>
            UPDATE m_adhoc
            SET temp_is_active = is_active WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_adhoc ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_adhoc
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = '0' THEN false
            WHEN is_active = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_adhoc
            SET is_active = CASE
            WHEN temp_is_active = '0' THEN false
            WHEN temp_is_active = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_adhoc DROP COLUMN temp_is_active;
        </sql>
    </changeSet>
    <changeSet id="fix_m_calendar_column-repeating" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_calendar'
                AND column_name = 'repeating'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_calendar ADD COLUMN temp_repeating SMALLINT;
        </sql>
        <sql>
            UPDATE m_calendar
            SET temp_repeating = repeating where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_calendar ALTER COLUMN repeating DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_calendar
            ALTER COLUMN repeating TYPE BOOLEAN
            USING CASE
            WHEN repeating = 0 THEN false
            WHEN repeating = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_calendar
            SET repeating = CASE
            WHEN temp_repeating = 0 THEN false
            WHEN temp_repeating = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_calendar DROP COLUMN temp_repeating;
        </sql>

    </changeSet>
    <changeSet id="fix_m_calendar_history_column-repeating" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_calendar_history'
                AND column_name = 'repeating'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_calendar_history ADD COLUMN temp_repeating SMALLINT;
        </sql>
        <sql>
            UPDATE m_calendar_history
            SET temp_repeating = repeating where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_calendar_history ALTER COLUMN repeating DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_calendar_history
            ALTER COLUMN repeating TYPE BOOLEAN
            USING CASE
            WHEN repeating = 0 THEN false
            WHEN repeating = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_calendar_history
            SET repeating = CASE
            WHEN temp_repeating = 0 THEN false
            WHEN temp_repeating = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_calendar_history DROP COLUMN temp_repeating;
        </sql>

    </changeSet>
    <changeSet id="fix_m_charge_column-is_penalty" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_charge'
                AND column_name = 'is_penalty'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_charge ADD COLUMN temp_is_penalty SMALLINT;
        </sql>
        <sql>
            UPDATE m_charge
            SET temp_is_penalty = is_penalty where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge ALTER COLUMN is_penalty DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_charge
            ALTER COLUMN is_penalty TYPE BOOLEAN
            USING CASE
            WHEN is_penalty = 0 THEN false
            WHEN is_penalty = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_charge
            SET is_penalty = CASE
            WHEN temp_is_penalty = 0 THEN false
            WHEN temp_is_penalty = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge DROP COLUMN temp_is_penalty;
        </sql>

    </changeSet>
    <changeSet id="fix_m_charge_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_charge'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_charge ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_charge
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_charge
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_charge
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_charge_column-is_deleted" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_charge'
                AND column_name = 'is_deleted'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_charge ADD COLUMN temp_is_deleted SMALLINT;
        </sql>
        <sql>
            UPDATE m_charge
            SET temp_is_deleted = is_deleted where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge ALTER COLUMN is_deleted DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_charge
            ALTER COLUMN is_deleted TYPE BOOLEAN
            USING CASE
            WHEN is_deleted = 0 THEN false
            WHEN is_deleted = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_charge
            SET is_deleted = CASE
            WHEN temp_is_deleted = 0 THEN false
            WHEN temp_is_deleted = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge DROP COLUMN temp_is_deleted;
        </sql>

    </changeSet>
    <changeSet id="fix_m_charge_column-is_free_withdrawal" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_charge'
                AND column_name = 'is_free_withdrawal'
                AND data_type = 'integer';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_charge ADD COLUMN temp_is_free_withdrawal INTEGER;
        </sql>
        <sql>
            UPDATE m_charge
            SET temp_is_free_withdrawal = is_free_withdrawal WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge ALTER COLUMN is_free_withdrawal DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_charge
            ALTER COLUMN is_free_withdrawal TYPE BOOLEAN
            USING CASE
            WHEN is_free_withdrawal = 0 THEN false
            WHEN is_free_withdrawal = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_charge
            SET is_free_withdrawal = CASE
            WHEN temp_is_free_withdrawal = 0 THEN false
            WHEN temp_is_free_withdrawal = 1 THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge DROP COLUMN temp_is_free_withdrawal;
        </sql>
    </changeSet>
    <changeSet id="fix_m_charge_column-is_payment_type" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_charge'
                AND column_name = 'is_payment_type'
                AND data_type = 'integer';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_charge ADD COLUMN temp_is_payment_type INTEGER;
        </sql>
        <sql>
            UPDATE m_charge
            SET temp_is_payment_type = is_payment_type WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge ALTER COLUMN is_payment_type DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_charge
            ALTER COLUMN is_payment_type TYPE BOOLEAN
            USING CASE
            WHEN is_payment_type = 0 THEN false
            WHEN is_payment_type = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_charge
            SET is_payment_type = CASE
            WHEN temp_is_payment_type = 0 THEN false
            WHEN temp_is_payment_type = 1 THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_charge DROP COLUMN temp_is_payment_type;
        </sql>
    </changeSet>
    <changeSet id="fix_m_client_address_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_client_address'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_client_address ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_client_address
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_address ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_client_address
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_client_address
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_address DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_client_charge_column-is_penalty" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_client_charge'
                AND column_name = 'is_penalty'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_client_charge ADD COLUMN temp_is_penalty SMALLINT;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET temp_is_penalty = is_penalty where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge ALTER COLUMN is_penalty DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_client_charge
            ALTER COLUMN is_penalty TYPE BOOLEAN
            USING CASE
            WHEN is_penalty = 0 THEN false
            WHEN is_penalty = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET is_penalty = CASE
            WHEN temp_is_penalty = 0 THEN false
            WHEN temp_is_penalty = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge DROP COLUMN temp_is_penalty;
        </sql>

    </changeSet>
    <changeSet id="fix_m_client_charge_column-is_paid_derived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_client_charge'
                AND column_name = 'is_paid_derived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_client_charge ADD COLUMN temp_is_paid_derived SMALLINT;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET temp_is_paid_derived = is_paid_derived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge ALTER COLUMN is_paid_derived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_client_charge
            ALTER COLUMN is_paid_derived TYPE BOOLEAN
            USING CASE
            WHEN is_paid_derived = 0 THEN false
            WHEN is_paid_derived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET is_paid_derived = CASE
            WHEN temp_is_paid_derived = 0 THEN false
            WHEN temp_is_paid_derived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge DROP COLUMN temp_is_paid_derived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_client_charge_column-waived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_client_charge'
                AND column_name = 'waived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_client_charge ADD COLUMN temp_waived SMALLINT;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET temp_waived = waived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge ALTER COLUMN waived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_client_charge
            ALTER COLUMN waived TYPE BOOLEAN
            USING CASE
            WHEN waived = 0 THEN false
            WHEN waived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET waived = CASE
            WHEN temp_waived = 0 THEN false
            WHEN temp_waived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge DROP COLUMN temp_waived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_client_charge_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_client_charge'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_client_charge ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_client_charge
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_client_charge
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_charge DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_client_transaction_column-is_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_client_transaction'
                AND column_name = 'is_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_client_transaction ADD COLUMN temp_is_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_client_transaction
            SET temp_is_reversed = is_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_transaction ALTER COLUMN is_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_client_transaction
            ALTER COLUMN is_reversed TYPE BOOLEAN
            USING CASE
            WHEN is_reversed = 0 THEN false
            WHEN is_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_client_transaction
            SET is_reversed = CASE
            WHEN temp_is_reversed = 0 THEN false
            WHEN temp_is_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_client_transaction DROP COLUMN temp_is_reversed;
        </sql>

    </changeSet>

    <changeSet id="fix_m_code_value_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_code_value'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_code_value ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_code_value
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_code_value ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_code_value
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_code_value
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_code_value DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_code_value_column-is_mandatory" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_code_value'
                AND column_name = 'is_mandatory'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_code_value ADD COLUMN temp_is_mandatory SMALLINT;
        </sql>
        <sql>
            UPDATE m_code_value
            SET temp_is_mandatory = is_mandatory where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_code_value ALTER COLUMN is_mandatory DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_code_value
            ALTER COLUMN is_mandatory TYPE BOOLEAN
            USING CASE
            WHEN is_mandatory = 0 THEN false
            WHEN is_mandatory = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_code_value
            SET is_mandatory = CASE
            WHEN temp_is_mandatory = 0 THEN false
            WHEN temp_is_mandatory = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_code_value DROP COLUMN temp_is_mandatory;
        </sql>

    </changeSet>
    <changeSet id="fix_notification_generator_column-is_system_generated" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'notification_generator'
                AND column_name = 'is_system_generated'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE notification_generator ADD COLUMN temp_is_system_generated SMALLINT;
        </sql>
        <sql>
            UPDATE notification_generator
            SET temp_is_system_generated = is_system_generated where id > 0;
        </sql>
        <sql>
            ALTER TABLE notification_generator ALTER COLUMN is_system_generated DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE notification_generator
            ALTER COLUMN is_system_generated TYPE BOOLEAN
            USING CASE
            WHEN is_system_generated = 0 THEN false
            WHEN is_system_generated = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE notification_generator
            SET is_system_generated = CASE
            WHEN temp_is_system_generated = 0 THEN false
            WHEN temp_is_system_generated = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE notification_generator DROP COLUMN temp_is_system_generated;
        </sql>

    </changeSet>
    <changeSet id="fix_notification_mapper_column-is_read" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'notification_mapper'
                AND column_name = 'is_read'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE notification_mapper ADD COLUMN temp_is_read SMALLINT;
        </sql>
        <sql>
            UPDATE notification_mapper
            SET temp_is_read = is_read where id > 0;
        </sql>
        <sql>
            ALTER TABLE notification_mapper ALTER COLUMN is_read DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE notification_mapper
            ALTER COLUMN is_read TYPE BOOLEAN
            USING CASE
            WHEN is_read = 0 THEN false
            WHEN is_read = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE notification_mapper
            SET is_read = CASE
            WHEN temp_is_read = 0 THEN false
            WHEN temp_is_read = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE notification_mapper DROP COLUMN temp_is_read;
        </sql>

    </changeSet>
    <changeSet id="fix_m_staff_column-is_loan_officer" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_staff'
                AND column_name = 'is_loan_officer'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_staff ADD COLUMN temp_is_loan_officer SMALLINT;
        </sql>
        <sql>
            UPDATE m_staff
            SET temp_is_loan_officer = is_loan_officer where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_staff ALTER COLUMN is_loan_officer DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_staff
            ALTER COLUMN is_loan_officer TYPE BOOLEAN
            USING CASE
            WHEN is_loan_officer = 0 THEN false
            WHEN is_loan_officer = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_staff
            SET is_loan_officer = CASE
            WHEN temp_is_loan_officer = 0 THEN false
            WHEN temp_is_loan_officer = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_staff DROP COLUMN temp_is_loan_officer;
        </sql>

    </changeSet>
    <changeSet id="fix_m_staff_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_staff'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_staff ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_staff
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_staff ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_staff
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_staff
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_staff DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_creditbureau_loanproduct_mapping_column-is_creditcheck_mandatory" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_creditbureau_loanproduct_mapping'
                AND column_name = 'is_creditcheck_mandatory'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping ADD COLUMN temp_is_creditcheck_mandatory SMALLINT;
        </sql>
        <sql>
            UPDATE m_creditbureau_loanproduct_mapping
            SET temp_is_creditcheck_mandatory = is_creditcheck_mandatory where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping ALTER COLUMN is_creditcheck_mandatory DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping
            ALTER COLUMN is_creditcheck_mandatory TYPE BOOLEAN
            USING CASE
            WHEN is_creditcheck_mandatory = 0 THEN false
            WHEN is_creditcheck_mandatory = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_creditbureau_loanproduct_mapping
            SET is_creditcheck_mandatory = CASE
            WHEN temp_is_creditcheck_mandatory = 0 THEN false
            WHEN temp_is_creditcheck_mandatory = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping DROP COLUMN temp_is_creditcheck_mandatory;
        </sql>

    </changeSet>
    <changeSet id="fix_m_creditbureau_loanproduct_mapping_column-skip_creditcheck_in_failure" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_creditbureau_loanproduct_mapping'
                AND column_name = 'skip_creditcheck_in_failure'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping ADD COLUMN temp_skip_creditcheck_in_failure SMALLINT;
        </sql>
        <sql>
            UPDATE m_creditbureau_loanproduct_mapping
            SET temp_skip_creditcheck_in_failure = skip_creditcheck_in_failure where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping ALTER COLUMN skip_creditcheck_in_failure DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping
            ALTER COLUMN skip_creditcheck_in_failure TYPE BOOLEAN
            USING CASE
            WHEN skip_creditcheck_in_failure = 0 THEN false
            WHEN skip_creditcheck_in_failure = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_creditbureau_loanproduct_mapping
            SET skip_creditcheck_in_failure = CASE
            WHEN temp_skip_creditcheck_in_failure = 0 THEN false
            WHEN temp_skip_creditcheck_in_failure = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping DROP COLUMN temp_skip_creditcheck_in_failure;
        </sql>

    </changeSet>
    <changeSet id="fix_m_creditbureau_loanproduct_mapping_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_creditbureau_loanproduct_mapping'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_creditbureau_loanproduct_mapping
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_creditbureau_loanproduct_mapping
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_creditbureau_loanproduct_mapping DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_account_on_hold_transaction_column-is_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_account_on_hold_transaction'
                AND column_name = 'is_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_account_on_hold_transaction ADD COLUMN temp_is_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_account_on_hold_transaction
            SET temp_is_reversed = is_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_on_hold_transaction ALTER COLUMN is_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_on_hold_transaction
            ALTER COLUMN is_reversed TYPE BOOLEAN
            USING CASE
            WHEN is_reversed = 0 THEN false
            WHEN is_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_account_on_hold_transaction
            SET is_reversed = CASE
            WHEN temp_is_reversed = 0 THEN false
            WHEN temp_is_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_on_hold_transaction DROP COLUMN temp_is_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_account_recurring_detail_column-is_mandatory" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_account_recurring_detail'
                AND column_name = 'is_mandatory'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ADD COLUMN temp_is_mandatory SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET temp_is_mandatory = is_mandatory where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ALTER COLUMN is_mandatory DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail
            ALTER COLUMN is_mandatory TYPE BOOLEAN
            USING CASE
            WHEN is_mandatory = 0 THEN false
            WHEN is_mandatory = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET is_mandatory = CASE
            WHEN temp_is_mandatory = 0 THEN false
            WHEN temp_is_mandatory = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail DROP COLUMN temp_is_mandatory;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_account_recurring_detail_column-allow_withdrawal" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_account_recurring_detail'
                AND column_name = 'allow_withdrawal'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ADD COLUMN temp_allow_withdrawal SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET temp_allow_withdrawal = allow_withdrawal where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ALTER COLUMN allow_withdrawal DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail
            ALTER COLUMN allow_withdrawal TYPE BOOLEAN
            USING CASE
            WHEN allow_withdrawal = 0 THEN false
            WHEN allow_withdrawal = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET allow_withdrawal = CASE
            WHEN temp_allow_withdrawal = 0 THEN false
            WHEN temp_allow_withdrawal = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail DROP COLUMN temp_allow_withdrawal;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_account_recurring_detail_column-adjust_advance_towards_future_payments" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_account_recurring_detail'
                AND column_name = 'adjust_advance_towards_future_payments'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ADD COLUMN temp_adjust_advance_towards_future_payments SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET temp_adjust_advance_towards_future_payments = adjust_advance_towards_future_payments where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ALTER COLUMN adjust_advance_towards_future_payments DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail
            ALTER COLUMN adjust_advance_towards_future_payments TYPE BOOLEAN
            USING CASE
            WHEN adjust_advance_towards_future_payments = 0 THEN false
            WHEN adjust_advance_towards_future_payments = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET adjust_advance_towards_future_payments = CASE
            WHEN temp_adjust_advance_towards_future_payments = 0 THEN false
            WHEN temp_adjust_advance_towards_future_payments = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail DROP COLUMN temp_adjust_advance_towards_future_payments;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_account_recurring_detail_column-is_calendar_inherited" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_account_recurring_detail'
                AND column_name = 'is_calendar_inherited'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ADD COLUMN temp_is_calendar_inherited SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET temp_is_calendar_inherited = is_calendar_inherited where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail ALTER COLUMN is_calendar_inherited DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail
            ALTER COLUMN is_calendar_inherited TYPE BOOLEAN
            USING CASE
            WHEN is_calendar_inherited = 0 THEN false
            WHEN is_calendar_inherited = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_account_recurring_detail
            SET is_calendar_inherited = CASE
            WHEN temp_is_calendar_inherited = 0 THEN false
            WHEN temp_is_calendar_inherited = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_recurring_detail DROP COLUMN temp_is_calendar_inherited;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_account_term_and_preclosure_column-pre_closure_penal_applicable" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_account_term_and_preclosure'
                AND column_name = 'pre_closure_penal_applicable'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure ADD COLUMN temp_pre_closure_penal_applicable SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_account_term_and_preclosure
            SET temp_pre_closure_penal_applicable = pre_closure_penal_applicable where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure ALTER COLUMN pre_closure_penal_applicable DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure
            ALTER COLUMN pre_closure_penal_applicable TYPE BOOLEAN
            USING CASE
            WHEN pre_closure_penal_applicable = 0 THEN false
            WHEN pre_closure_penal_applicable = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_account_term_and_preclosure
            SET pre_closure_penal_applicable = CASE
            WHEN temp_pre_closure_penal_applicable = 0 THEN false
            WHEN temp_pre_closure_penal_applicable = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure DROP COLUMN temp_pre_closure_penal_applicable;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_account_term_and_preclosure_column-transfer_interest_to_linked_account" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_account_term_and_preclosure'
                AND column_name = 'transfer_interest_to_linked_account'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure ADD COLUMN temp_transfer_interest_to_linked_account SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_account_term_and_preclosure
            SET temp_transfer_interest_to_linked_account = transfer_interest_to_linked_account where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure ALTER COLUMN transfer_interest_to_linked_account DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure
            ALTER COLUMN transfer_interest_to_linked_account TYPE BOOLEAN
            USING CASE
            WHEN transfer_interest_to_linked_account = 0 THEN false
            WHEN transfer_interest_to_linked_account = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_account_term_and_preclosure
            SET transfer_interest_to_linked_account = CASE
            WHEN temp_transfer_interest_to_linked_account = 0 THEN false
            WHEN temp_transfer_interest_to_linked_account = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_account_term_and_preclosure DROP COLUMN temp_transfer_interest_to_linked_account;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_product_recurring_detail_column-is_mandatory" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_product_recurring_detail'
                AND column_name = 'is_mandatory'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail ADD COLUMN temp_is_mandatory SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_product_recurring_detail
            SET temp_is_mandatory = is_mandatory where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail ALTER COLUMN is_mandatory DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail
            ALTER COLUMN is_mandatory TYPE BOOLEAN
            USING CASE
            WHEN is_mandatory = 0 THEN false
            WHEN is_mandatory = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_product_recurring_detail
            SET is_mandatory = CASE
            WHEN temp_is_mandatory = 0 THEN false
            WHEN temp_is_mandatory = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail DROP COLUMN temp_is_mandatory;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_product_recurring_detail_column-allow_withdrawal" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_product_recurring_detail'
                AND column_name = 'allow_withdrawal'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail ADD COLUMN temp_allow_withdrawal SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_product_recurring_detail
            SET temp_allow_withdrawal = allow_withdrawal where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail ALTER COLUMN allow_withdrawal DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail
            ALTER COLUMN allow_withdrawal TYPE BOOLEAN
            USING CASE
            WHEN allow_withdrawal = 0 THEN false
            WHEN allow_withdrawal = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_product_recurring_detail
            SET allow_withdrawal = CASE
            WHEN temp_allow_withdrawal = 0 THEN false
            WHEN temp_allow_withdrawal = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail DROP COLUMN temp_allow_withdrawal;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_product_recurring_detail_column-adjust_advance_towards_future_payments" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_product_recurring_detail'
                AND column_name = 'adjust_advance_towards_future_payments'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail ADD COLUMN temp_adjust_advance_towards_future_payments SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_product_recurring_detail
            SET temp_adjust_advance_towards_future_payments = adjust_advance_towards_future_payments where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail ALTER COLUMN adjust_advance_towards_future_payments DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail
            ALTER COLUMN adjust_advance_towards_future_payments TYPE BOOLEAN
            USING CASE
            WHEN adjust_advance_towards_future_payments = 0 THEN false
            WHEN adjust_advance_towards_future_payments = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_product_recurring_detail
            SET adjust_advance_towards_future_payments = CASE
            WHEN temp_adjust_advance_towards_future_payments = 0 THEN false
            WHEN temp_adjust_advance_towards_future_payments = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_recurring_detail DROP COLUMN temp_adjust_advance_towards_future_payments;
        </sql>

    </changeSet>
    <changeSet id="fix_m_deposit_product_term_and_preclosure_column-pre_closure_penal_applicable" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_deposit_product_term_and_preclosure'
                AND column_name = 'pre_closure_penal_applicable'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_deposit_product_term_and_preclosure ADD COLUMN temp_pre_closure_penal_applicable SMALLINT;
        </sql>
        <sql>
            UPDATE m_deposit_product_term_and_preclosure
            SET temp_pre_closure_penal_applicable = pre_closure_penal_applicable where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_term_and_preclosure ALTER COLUMN pre_closure_penal_applicable DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_term_and_preclosure
            ALTER COLUMN pre_closure_penal_applicable TYPE BOOLEAN
            USING CASE
            WHEN pre_closure_penal_applicable = 0 THEN false
            WHEN pre_closure_penal_applicable = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_deposit_product_term_and_preclosure
            SET pre_closure_penal_applicable = CASE
            WHEN temp_pre_closure_penal_applicable = 0 THEN false
            WHEN temp_pre_closure_penal_applicable = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_deposit_product_term_and_preclosure DROP COLUMN temp_pre_closure_penal_applicable;
        </sql>

    </changeSet>
    <changeSet id="fix_m_entity_datatable_check_column-system_defined" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_entity_datatable_check'
                AND column_name = 'system_defined'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_entity_datatable_check ADD COLUMN temp_system_defined SMALLINT;
        </sql>
        <sql>
            UPDATE m_entity_datatable_check
            SET temp_system_defined = system_defined where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_entity_datatable_check ALTER COLUMN system_defined DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_entity_datatable_check
            ALTER COLUMN system_defined TYPE BOOLEAN
            USING CASE
            WHEN system_defined = 0 THEN false
            WHEN system_defined = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_entity_datatable_check
            SET system_defined = CASE
            WHEN temp_system_defined = 0 THEN false
            WHEN temp_system_defined = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_entity_datatable_check DROP COLUMN temp_system_defined;
        </sql>

    </changeSet>
    <changeSet id="fix_m_family_members_column-is_dependent" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_family_members'
                AND column_name = 'is_dependent'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_family_members ADD COLUMN temp_is_dependent SMALLINT;
        </sql>
        <sql>
            UPDATE m_family_members
            SET temp_is_dependent = is_dependent where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_family_members ALTER COLUMN is_dependent DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_family_members
            ALTER COLUMN is_dependent TYPE BOOLEAN
            USING CASE
            WHEN is_dependent = 0 THEN false
            WHEN is_dependent = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_family_members
            SET is_dependent = CASE
            WHEN temp_is_dependent = 0 THEN false
            WHEN temp_is_dependent = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_family_members DROP COLUMN temp_is_dependent;
        </sql>

    </changeSet>
    <changeSet id="fix_m_field_configuration_column-is_enabled" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_field_configuration'
                AND column_name = 'is_enabled'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_field_configuration ADD COLUMN temp_is_enabled SMALLINT;
        </sql>
        <sql>
            UPDATE m_field_configuration
            SET temp_is_enabled = is_enabled where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_field_configuration ALTER COLUMN is_enabled DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_field_configuration
            ALTER COLUMN is_enabled TYPE BOOLEAN
            USING CASE
            WHEN is_enabled = 0 THEN false
            WHEN is_enabled = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_field_configuration
            SET is_enabled = CASE
            WHEN temp_is_enabled = 0 THEN false
            WHEN temp_is_enabled = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_field_configuration DROP COLUMN temp_is_enabled;
        </sql>

    </changeSet>
    <changeSet id="fix_m_field_configuration_column-is_mandatory" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_field_configuration'
                AND column_name = 'is_mandatory'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_field_configuration ADD COLUMN temp_is_mandatory SMALLINT;
        </sql>
        <sql>
            UPDATE m_field_configuration
            SET temp_is_mandatory = is_mandatory where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_field_configuration ALTER COLUMN is_mandatory DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_field_configuration
            ALTER COLUMN is_mandatory TYPE BOOLEAN
            USING CASE
            WHEN is_mandatory = 0 THEN false
            WHEN is_mandatory = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_field_configuration
            SET is_mandatory = CASE
            WHEN temp_is_mandatory = 0 THEN false
            WHEN temp_is_mandatory = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_field_configuration DROP COLUMN temp_is_mandatory;
        </sql>

    </changeSet>
    <changeSet id="fix_m_floating_rates_column-is_base_lending_rate" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_floating_rates'
                AND column_name = 'is_base_lending_rate'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_floating_rates ADD COLUMN temp_is_base_lending_rate bit varying(1);
        </sql>
        <sql>
            UPDATE m_floating_rates
            SET temp_is_base_lending_rate = is_base_lending_rate WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates ALTER COLUMN is_base_lending_rate DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates
            ALTER COLUMN is_base_lending_rate TYPE BOOLEAN
            USING CASE
            WHEN is_base_lending_rate = '0' THEN false
            WHEN is_base_lending_rate = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_floating_rates
            SET is_base_lending_rate = CASE
            WHEN temp_is_base_lending_rate = '0' THEN false
            WHEN temp_is_base_lending_rate = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates DROP COLUMN temp_is_base_lending_rate;
        </sql>
    </changeSet>
    <changeSet id="fix_m_floating_rates_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_floating_rates'
                AND column_name = 'is_active'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_floating_rates ADD COLUMN temp_is_active bit varying(1);
        </sql>
        <sql>
            UPDATE m_floating_rates
            SET temp_is_active = is_active WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = '0' THEN false
            WHEN is_active = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_floating_rates
            SET is_active = CASE
            WHEN temp_is_active = '0' THEN false
            WHEN temp_is_active = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates DROP COLUMN temp_is_active;
        </sql>
    </changeSet>
    <changeSet id="fix_m_floating_rates_periods_column-is_differential_to_base_lending_rate" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_floating_rates_periods'
                AND column_name = 'is_differential_to_base_lending_rate'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_floating_rates_periods ADD COLUMN temp_is_differential_to_base_lending_rate bit varying(1);
        </sql>
        <sql>
            UPDATE m_floating_rates_periods
            SET temp_is_differential_to_base_lending_rate = is_differential_to_base_lending_rate WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates_periods ALTER COLUMN is_differential_to_base_lending_rate DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates_periods
            ALTER COLUMN is_differential_to_base_lending_rate TYPE BOOLEAN
            USING CASE
            WHEN is_differential_to_base_lending_rate = '0' THEN false
            WHEN is_differential_to_base_lending_rate = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_floating_rates_periods
            SET is_differential_to_base_lending_rate = CASE
            WHEN temp_is_differential_to_base_lending_rate = '0' THEN false
            WHEN temp_is_differential_to_base_lending_rate = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates_periods DROP COLUMN temp_is_differential_to_base_lending_rate;
        </sql>
    </changeSet>
    <changeSet id="fix_m_floating_rates_periods_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_floating_rates_periods'
                AND column_name = 'is_active'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_floating_rates_periods ADD COLUMN temp_is_active bit varying(1);
        </sql>
        <sql>
            UPDATE m_floating_rates_periods
            SET temp_is_active = is_active WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates_periods ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates_periods
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = '0' THEN false
            WHEN is_active = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_floating_rates_periods
            SET is_active = CASE
            WHEN temp_is_active = '0' THEN false
            WHEN temp_is_active = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_floating_rates_periods DROP COLUMN temp_is_active;
        </sql>
    </changeSet>
    <changeSet id="fix_m_group_level_column-super_parent" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_group_level'
                AND column_name = 'super_parent'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_group_level ADD COLUMN temp_super_parent SMALLINT;
        </sql>
        <sql>
            UPDATE m_group_level
            SET temp_super_parent = super_parent where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_group_level ALTER COLUMN super_parent DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_group_level
            ALTER COLUMN super_parent TYPE BOOLEAN
            USING CASE
            WHEN super_parent = 0 THEN false
            WHEN super_parent = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_group_level
            SET super_parent = CASE
            WHEN temp_super_parent = 0 THEN false
            WHEN temp_super_parent = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_group_level DROP COLUMN temp_super_parent;
        </sql>

    </changeSet>
    <changeSet id="fix_m_group_level_column-recursable" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_group_level'
                AND column_name = 'recursable'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_group_level ADD COLUMN temp_recursable SMALLINT;
        </sql>
        <sql>
            UPDATE m_group_level
            SET temp_recursable = recursable where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_group_level ALTER COLUMN recursable DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_group_level
            ALTER COLUMN recursable TYPE BOOLEAN
            USING CASE
            WHEN recursable = 0 THEN false
            WHEN recursable = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_group_level
            SET recursable = CASE
            WHEN temp_recursable = 0 THEN false
            WHEN temp_recursable = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_group_level DROP COLUMN temp_recursable;
        </sql>

    </changeSet>
    <changeSet id="fix_m_group_level_column-can_have_clients" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_group_level'
                AND column_name = 'can_have_clients'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_group_level ADD COLUMN temp_can_have_clients SMALLINT;
        </sql>
        <sql>
            UPDATE m_group_level
            SET temp_can_have_clients = can_have_clients where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_group_level ALTER COLUMN can_have_clients DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_group_level
            ALTER COLUMN can_have_clients TYPE BOOLEAN
            USING CASE
            WHEN can_have_clients = 0 THEN false
            WHEN can_have_clients = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_group_level
            SET can_have_clients = CASE
            WHEN temp_can_have_clients = 0 THEN false
            WHEN temp_can_have_clients = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_group_level DROP COLUMN temp_can_have_clients;
        </sql>

    </changeSet>
    <changeSet id="fix_m_guarantor_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_guarantor'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_guarantor ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_guarantor
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_guarantor ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_guarantor
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_guarantor
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_guarantor DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_guarantor_transaction_column-is_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_guarantor_transaction'
                AND column_name = 'is_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_guarantor_transaction ADD COLUMN temp_is_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_guarantor_transaction
            SET temp_is_reversed = is_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_guarantor_transaction ALTER COLUMN is_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_guarantor_transaction
            ALTER COLUMN is_reversed TYPE BOOLEAN
            USING CASE
            WHEN is_reversed = 0 THEN false
            WHEN is_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_guarantor_transaction
            SET is_reversed = CASE
            WHEN temp_is_reversed = 0 THEN false
            WHEN temp_is_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_guarantor_transaction DROP COLUMN temp_is_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_holiday_column-processed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_holiday'
                AND column_name = 'processed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_holiday ADD COLUMN temp_processed SMALLINT;
        </sql>
        <sql>
            UPDATE m_holiday
            SET temp_processed = processed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_holiday ALTER COLUMN processed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_holiday
            ALTER COLUMN processed TYPE BOOLEAN
            USING CASE
            WHEN processed = 0 THEN false
            WHEN processed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_holiday
            SET processed = CASE
            WHEN temp_processed = 0 THEN false
            WHEN temp_processed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_holiday DROP COLUMN temp_processed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_hook_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_hook'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_hook ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_hook
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_hook ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_hook
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_hook
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_hook DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_hook_schema_column-optional" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_hook_schema'
                AND column_name = 'optional'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_hook_schema ADD COLUMN temp_optional SMALLINT;
        </sql>
        <sql>
            UPDATE m_hook_schema
            SET temp_optional = optional where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_hook_schema ALTER COLUMN optional DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_hook_schema
            ALTER COLUMN optional TYPE BOOLEAN
            USING CASE
            WHEN optional = 0 THEN false
            WHEN optional = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_hook_schema
            SET optional = CASE
            WHEN temp_optional = 0 THEN false
            WHEN temp_optional = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_hook_schema DROP COLUMN temp_optional;
        </sql>

    </changeSet>
    <changeSet id="fix_m_import_document_column-completed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_import_document'
                AND column_name = 'completed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_import_document ADD COLUMN temp_completed SMALLINT;
        </sql>
        <sql>
            UPDATE m_import_document
            SET temp_completed = completed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_import_document ALTER COLUMN completed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_import_document
            ALTER COLUMN completed TYPE BOOLEAN
            USING CASE
            WHEN completed = 0 THEN false
            WHEN completed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_import_document
            SET completed = CASE
            WHEN temp_completed = 0 THEN false
            WHEN temp_completed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_import_document DROP COLUMN temp_completed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-is_floating_interest_rate" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'is_floating_interest_rate'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_is_floating_interest_rate bit varying(1);
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_is_floating_interest_rate = is_floating_interest_rate WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN is_floating_interest_rate DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN is_floating_interest_rate TYPE BOOLEAN
            USING CASE
            WHEN is_floating_interest_rate = '0' THEN false
            WHEN is_floating_interest_rate = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET is_floating_interest_rate = CASE
            WHEN temp_is_floating_interest_rate = '0' THEN false
            WHEN temp_is_floating_interest_rate = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_is_floating_interest_rate;
        </sql>
    </changeSet>
    <changeSet id="fix_m_loan_column-is_fraud" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'is_fraud'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_is_fraud SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_is_fraud = is_fraud where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN is_fraud DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN is_fraud TYPE BOOLEAN
            USING CASE
            WHEN is_fraud = 0 THEN false
            WHEN is_fraud = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET is_fraud = CASE
            WHEN temp_is_fraud = 0 THEN false
            WHEN temp_is_fraud = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_is_fraud;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-is_charged_off" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'is_charged_off'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_is_charged_off SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_is_charged_off = is_charged_off where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN is_charged_off DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN is_charged_off TYPE BOOLEAN
            USING CASE
            WHEN is_charged_off = 0 THEN false
            WHEN is_charged_off = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET is_charged_off = CASE
            WHEN temp_is_charged_off = 0 THEN false
            WHEN temp_is_charged_off = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_is_charged_off;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-allow_partial_period_interest_calcualtion" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'allow_partial_period_interest_calcualtion'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_allow_partial_period_interest_calcualtion SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_allow_partial_period_interest_calcualtion = allow_partial_period_interest_calcualtion where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN allow_partial_period_interest_calcualtion DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN allow_partial_period_interest_calcualtion TYPE BOOLEAN
            USING CASE
            WHEN allow_partial_period_interest_calcualtion = 0 THEN false
            WHEN allow_partial_period_interest_calcualtion = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET allow_partial_period_interest_calcualtion = CASE
            WHEN temp_allow_partial_period_interest_calcualtion = 0 THEN false
            WHEN temp_allow_partial_period_interest_calcualtion = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_allow_partial_period_interest_calcualtion;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-sync_disbursement_with_meeting" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'sync_disbursement_with_meeting'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_sync_disbursement_with_meeting SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_sync_disbursement_with_meeting = sync_disbursement_with_meeting where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN sync_disbursement_with_meeting DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN sync_disbursement_with_meeting TYPE BOOLEAN
            USING CASE
            WHEN sync_disbursement_with_meeting = 0 THEN false
            WHEN sync_disbursement_with_meeting = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET sync_disbursement_with_meeting = CASE
            WHEN temp_sync_disbursement_with_meeting = 0 THEN false
            WHEN temp_sync_disbursement_with_meeting = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_sync_disbursement_with_meeting;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-is_npa" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'is_npa'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_is_npa SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_is_npa = is_npa where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN is_npa DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN is_npa TYPE BOOLEAN
            USING CASE
            WHEN is_npa = 0 THEN false
            WHEN is_npa = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET is_npa = CASE
            WHEN temp_is_npa = 0 THEN false
            WHEN temp_is_npa = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_is_npa;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-interest_recalculation_enabled" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'interest_recalculation_enabled'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_interest_recalculation_enabled SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_interest_recalculation_enabled = interest_recalculation_enabled where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN interest_recalculation_enabled DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN interest_recalculation_enabled TYPE BOOLEAN
            USING CASE
            WHEN interest_recalculation_enabled = 0 THEN false
            WHEN interest_recalculation_enabled = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET interest_recalculation_enabled = CASE
            WHEN temp_interest_recalculation_enabled = 0 THEN false
            WHEN temp_interest_recalculation_enabled = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_interest_recalculation_enabled;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-create_standing_instruction_at_disbursement" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'create_standing_instruction_at_disbursement'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_create_standing_instruction_at_disbursement SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_create_standing_instruction_at_disbursement = create_standing_instruction_at_disbursement where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN create_standing_instruction_at_disbursement DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN create_standing_instruction_at_disbursement TYPE BOOLEAN
            USING CASE
            WHEN create_standing_instruction_at_disbursement = 0 THEN false
            WHEN create_standing_instruction_at_disbursement = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET create_standing_instruction_at_disbursement = CASE
            WHEN temp_create_standing_instruction_at_disbursement = 0 THEN false
            WHEN temp_create_standing_instruction_at_disbursement = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_create_standing_instruction_at_disbursement;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-is_topup" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'is_topup'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_is_topup SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_is_topup = is_topup where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN is_topup DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN is_topup TYPE BOOLEAN
            USING CASE
            WHEN is_topup = 0 THEN false
            WHEN is_topup = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET is_topup = CASE
            WHEN temp_is_topup = 0 THEN false
            WHEN temp_is_topup = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_is_topup;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-is_equal_amortization" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'is_equal_amortization'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_is_equal_amortization SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_is_equal_amortization = is_equal_amortization where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN is_equal_amortization DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN is_equal_amortization TYPE BOOLEAN
            USING CASE
            WHEN is_equal_amortization = 0 THEN false
            WHEN is_equal_amortization = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET is_equal_amortization = CASE
            WHEN temp_is_equal_amortization = 0 THEN false
            WHEN temp_is_equal_amortization = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_is_equal_amortization;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-enable_down_payment" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'enable_down_payment'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_enable_down_payment SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_enable_down_payment = enable_down_payment where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN enable_down_payment DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN enable_down_payment TYPE BOOLEAN
            USING CASE
            WHEN enable_down_payment = 0 THEN false
            WHEN enable_down_payment = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET enable_down_payment = CASE
            WHEN temp_enable_down_payment = 0 THEN false
            WHEN temp_enable_down_payment = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_enable_down_payment;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-enable_installment_level_delinquency" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'enable_installment_level_delinquency'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_enable_installment_level_delinquency SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_enable_installment_level_delinquency = enable_installment_level_delinquency where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN enable_installment_level_delinquency DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN enable_installment_level_delinquency TYPE BOOLEAN
            USING CASE
            WHEN enable_installment_level_delinquency = 0 THEN false
            WHEN enable_installment_level_delinquency = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET enable_installment_level_delinquency = CASE
            WHEN temp_enable_installment_level_delinquency = 0 THEN false
            WHEN temp_enable_installment_level_delinquency = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_enable_installment_level_delinquency;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_column-enable_auto_repayment_for_down_payment" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan'
                AND column_name = 'enable_auto_repayment_for_down_payment'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan ADD COLUMN temp_enable_auto_repayment_for_down_payment SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan
            SET temp_enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan ALTER COLUMN enable_auto_repayment_for_down_payment DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan
            ALTER COLUMN enable_auto_repayment_for_down_payment TYPE BOOLEAN
            USING CASE
            WHEN enable_auto_repayment_for_down_payment = 0 THEN false
            WHEN enable_auto_repayment_for_down_payment = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan
            SET enable_auto_repayment_for_down_payment = CASE
            WHEN temp_enable_auto_repayment_for_down_payment = 0 THEN false
            WHEN temp_enable_auto_repayment_for_down_payment = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan DROP COLUMN temp_enable_auto_repayment_for_down_payment;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_charge_column-is_penalty" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_charge'
                AND column_name = 'is_penalty'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_charge ADD COLUMN temp_is_penalty SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET temp_is_penalty = is_penalty where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge ALTER COLUMN is_penalty DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge
            ALTER COLUMN is_penalty TYPE BOOLEAN
            USING CASE
            WHEN is_penalty = 0 THEN false
            WHEN is_penalty = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET is_penalty = CASE
            WHEN temp_is_penalty = 0 THEN false
            WHEN temp_is_penalty = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge DROP COLUMN temp_is_penalty;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_charge_column-is_paid_derived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_charge'
                AND column_name = 'is_paid_derived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_charge ADD COLUMN temp_is_paid_derived SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET temp_is_paid_derived = is_paid_derived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge ALTER COLUMN is_paid_derived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge
            ALTER COLUMN is_paid_derived TYPE BOOLEAN
            USING CASE
            WHEN is_paid_derived = 0 THEN false
            WHEN is_paid_derived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET is_paid_derived = CASE
            WHEN temp_is_paid_derived = 0 THEN false
            WHEN temp_is_paid_derived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge DROP COLUMN temp_is_paid_derived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_charge_column-waived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_charge'
                AND column_name = 'waived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_charge ADD COLUMN temp_waived SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET temp_waived = waived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge ALTER COLUMN waived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge
            ALTER COLUMN waived TYPE BOOLEAN
            USING CASE
            WHEN waived = 0 THEN false
            WHEN waived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET waived = CASE
            WHEN temp_waived = 0 THEN false
            WHEN temp_waived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge DROP COLUMN temp_waived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_charge_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_charge'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_charge ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_charge
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_charge DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_collateral_management_column-is_released" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_collateral_management'
                AND column_name = 'is_released'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_collateral_management ADD COLUMN temp_is_released SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_collateral_management
            SET temp_is_released = is_released where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_collateral_management ALTER COLUMN is_released DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_collateral_management
            ALTER COLUMN is_released TYPE BOOLEAN
            USING CASE
            WHEN is_released = 0 THEN false
            WHEN is_released = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_collateral_management
            SET is_released = CASE
            WHEN temp_is_released = 0 THEN false
            WHEN temp_is_released = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_collateral_management DROP COLUMN temp_is_released;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_disbursement_detail_column-is_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_disbursement_detail'
                AND column_name = 'is_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_disbursement_detail ADD COLUMN temp_is_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_disbursement_detail
            SET temp_is_reversed = is_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_disbursement_detail ALTER COLUMN is_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_disbursement_detail
            ALTER COLUMN is_reversed TYPE BOOLEAN
            USING CASE
            WHEN is_reversed = 0 THEN false
            WHEN is_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_disbursement_detail
            SET is_reversed = CASE
            WHEN temp_is_reversed = 0 THEN false
            WHEN temp_is_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_disbursement_detail DROP COLUMN temp_is_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_installment_charge_column-is_paid_derived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_installment_charge'
                AND column_name = 'is_paid_derived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_installment_charge ADD COLUMN temp_is_paid_derived SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_installment_charge
            SET temp_is_paid_derived = is_paid_derived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_installment_charge ALTER COLUMN is_paid_derived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_installment_charge
            ALTER COLUMN is_paid_derived TYPE BOOLEAN
            USING CASE
            WHEN is_paid_derived = 0 THEN false
            WHEN is_paid_derived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_installment_charge
            SET is_paid_derived = CASE
            WHEN temp_is_paid_derived = 0 THEN false
            WHEN temp_is_paid_derived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_installment_charge DROP COLUMN temp_is_paid_derived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_installment_charge_column-waived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_installment_charge'
                AND column_name = 'waived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_installment_charge ADD COLUMN temp_waived SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_installment_charge
            SET temp_waived = waived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_installment_charge ALTER COLUMN waived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_installment_charge
            ALTER COLUMN waived TYPE BOOLEAN
            USING CASE
            WHEN waived = 0 THEN false
            WHEN waived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_installment_charge
            SET waived = CASE
            WHEN temp_waived = 0 THEN false
            WHEN temp_waived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_installment_charge DROP COLUMN temp_waived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_recalculation_details_column-is_compounding_to_be_posted_as_transaction" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_recalculation_details'
                AND column_name = 'is_compounding_to_be_posted_as_transaction'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_recalculation_details ADD COLUMN temp_is_compounding_to_be_posted_as_transaction SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_recalculation_details
            SET temp_is_compounding_to_be_posted_as_transaction = is_compounding_to_be_posted_as_transaction where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_recalculation_details ALTER COLUMN is_compounding_to_be_posted_as_transaction DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_recalculation_details
            ALTER COLUMN is_compounding_to_be_posted_as_transaction TYPE BOOLEAN
            USING CASE
            WHEN is_compounding_to_be_posted_as_transaction = 0 THEN false
            WHEN is_compounding_to_be_posted_as_transaction = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_recalculation_details
            SET is_compounding_to_be_posted_as_transaction = CASE
            WHEN temp_is_compounding_to_be_posted_as_transaction = 0 THEN false
            WHEN temp_is_compounding_to_be_posted_as_transaction = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_recalculation_details DROP COLUMN temp_is_compounding_to_be_posted_as_transaction;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_recalculation_details_column-allow_compounding_on_eod" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_recalculation_details'
                AND column_name = 'allow_compounding_on_eod'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_recalculation_details ADD COLUMN temp_allow_compounding_on_eod SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_recalculation_details
            SET temp_allow_compounding_on_eod = allow_compounding_on_eod where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_recalculation_details ALTER COLUMN allow_compounding_on_eod DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_recalculation_details
            ALTER COLUMN allow_compounding_on_eod TYPE BOOLEAN
            USING CASE
            WHEN allow_compounding_on_eod = 0 THEN false
            WHEN allow_compounding_on_eod = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_recalculation_details
            SET allow_compounding_on_eod = CASE
            WHEN temp_allow_compounding_on_eod = 0 THEN false
            WHEN temp_allow_compounding_on_eod = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_recalculation_details DROP COLUMN temp_allow_compounding_on_eod;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_repayment_schedule_column-completed_derived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_repayment_schedule'
                AND column_name = 'completed_derived'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ADD COLUMN temp_completed_derived bit varying(1);
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET temp_completed_derived = completed_derived WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ALTER COLUMN completed_derived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule
            ALTER COLUMN completed_derived TYPE BOOLEAN
            USING CASE
            WHEN completed_derived = '0' THEN false
            WHEN completed_derived = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET completed_derived = CASE
            WHEN temp_completed_derived = '0' THEN false
            WHEN temp_completed_derived = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule DROP COLUMN temp_completed_derived;
        </sql>
    </changeSet>
    <changeSet id="fix_m_loan_repayment_schedule_column-recalculated_interest_component" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_repayment_schedule'
                AND column_name = 'recalculated_interest_component'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ADD COLUMN temp_recalculated_interest_component SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET temp_recalculated_interest_component = recalculated_interest_component where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ALTER COLUMN recalculated_interest_component DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule
            ALTER COLUMN recalculated_interest_component TYPE BOOLEAN
            USING CASE
            WHEN recalculated_interest_component = 0 THEN false
            WHEN recalculated_interest_component = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET recalculated_interest_component = CASE
            WHEN temp_recalculated_interest_component = 0 THEN false
            WHEN temp_recalculated_interest_component = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule DROP COLUMN temp_recalculated_interest_component;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_repayment_schedule_column-is_additional" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_repayment_schedule'
                AND column_name = 'is_additional'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ADD COLUMN temp_is_additional SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET temp_is_additional = is_additional where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ALTER COLUMN is_additional DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule
            ALTER COLUMN is_additional TYPE BOOLEAN
            USING CASE
            WHEN is_additional = 0 THEN false
            WHEN is_additional = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET is_additional = CASE
            WHEN temp_is_additional = 0 THEN false
            WHEN temp_is_additional = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule DROP COLUMN temp_is_additional;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_repayment_schedule_column-is_down_payment" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_repayment_schedule'
                AND column_name = 'is_down_payment'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ADD COLUMN temp_is_down_payment SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET temp_is_down_payment = is_down_payment where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ALTER COLUMN is_down_payment DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule
            ALTER COLUMN is_down_payment TYPE BOOLEAN
            USING CASE
            WHEN is_down_payment = 0 THEN false
            WHEN is_down_payment = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET is_down_payment = CASE
            WHEN temp_is_down_payment = 0 THEN false
            WHEN temp_is_down_payment = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule DROP COLUMN temp_is_down_payment;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_repayment_schedule_column-is_re_aged" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_repayment_schedule'
                AND column_name = 'is_re_aged'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ADD COLUMN temp_is_re_aged SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET temp_is_re_aged = is_re_aged where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule ALTER COLUMN is_re_aged DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule
            ALTER COLUMN is_re_aged TYPE BOOLEAN
            USING CASE
            WHEN is_re_aged = 0 THEN false
            WHEN is_re_aged = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_repayment_schedule
            SET is_re_aged = CASE
            WHEN temp_is_re_aged = 0 THEN false
            WHEN temp_is_re_aged = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_repayment_schedule DROP COLUMN temp_is_re_aged;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_term_variations_column-is_specific_to_installment" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_term_variations'
                AND column_name = 'is_specific_to_installment'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_term_variations ADD COLUMN temp_is_specific_to_installment SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_term_variations
            SET temp_is_specific_to_installment = is_specific_to_installment where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_term_variations ALTER COLUMN is_specific_to_installment DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_term_variations
            ALTER COLUMN is_specific_to_installment TYPE BOOLEAN
            USING CASE
            WHEN is_specific_to_installment = 0 THEN false
            WHEN is_specific_to_installment = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_term_variations
            SET is_specific_to_installment = CASE
            WHEN temp_is_specific_to_installment = 0 THEN false
            WHEN temp_is_specific_to_installment = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_term_variations DROP COLUMN temp_is_specific_to_installment;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_term_variations_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_term_variations'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_term_variations ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_term_variations
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_term_variations ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_term_variations
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_term_variations
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_term_variations DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_transaction_column-is_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_transaction'
                AND column_name = 'is_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_transaction ADD COLUMN temp_is_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_transaction
            SET temp_is_reversed = is_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_transaction ALTER COLUMN is_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_transaction
            ALTER COLUMN is_reversed TYPE BOOLEAN
            USING CASE
            WHEN is_reversed = 0 THEN false
            WHEN is_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_transaction
            SET is_reversed = CASE
            WHEN temp_is_reversed = 0 THEN false
            WHEN temp_is_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_transaction DROP COLUMN temp_is_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_loan_transaction_column-manually_adjusted_or_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_loan_transaction'
                AND column_name = 'manually_adjusted_or_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_loan_transaction ADD COLUMN temp_manually_adjusted_or_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_loan_transaction
            SET temp_manually_adjusted_or_reversed = manually_adjusted_or_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_transaction ALTER COLUMN manually_adjusted_or_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_loan_transaction
            ALTER COLUMN manually_adjusted_or_reversed TYPE BOOLEAN
            USING CASE
            WHEN manually_adjusted_or_reversed = 0 THEN false
            WHEN manually_adjusted_or_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_loan_transaction
            SET manually_adjusted_or_reversed = CASE
            WHEN temp_manually_adjusted_or_reversed = 0 THEN false
            WHEN temp_manually_adjusted_or_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_loan_transaction DROP COLUMN temp_manually_adjusted_or_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_mandatory_savings_schedule_column-completed_derived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_mandatory_savings_schedule'
                AND column_name = 'completed_derived'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_mandatory_savings_schedule ADD COLUMN temp_completed_derived bit varying(1);
        </sql>
        <sql>
            UPDATE m_mandatory_savings_schedule
            SET temp_completed_derived = completed_derived WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_mandatory_savings_schedule ALTER COLUMN completed_derived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_mandatory_savings_schedule
            ALTER COLUMN completed_derived TYPE BOOLEAN
            USING CASE
            WHEN completed_derived = '0' THEN false
            WHEN completed_derived = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_mandatory_savings_schedule
            SET completed_derived = CASE
            WHEN temp_completed_derived = '0' THEN false
            WHEN temp_completed_derived = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_mandatory_savings_schedule DROP COLUMN temp_completed_derived;
        </sql>
    </changeSet>
    <changeSet id="fix_m_multi_tenant_transfer_details_column-is_rolled_back" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_multi_tenant_transfer_details'
                AND column_name = 'is_rolled_back'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_multi_tenant_transfer_details ADD COLUMN temp_is_rolled_back SMALLINT;
        </sql>
        <sql>
            UPDATE m_multi_tenant_transfer_details
            SET temp_is_rolled_back = is_rolled_back where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_multi_tenant_transfer_details ALTER COLUMN is_rolled_back DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_multi_tenant_transfer_details
            ALTER COLUMN is_rolled_back TYPE BOOLEAN
            USING CASE
            WHEN is_rolled_back = 0 THEN false
            WHEN is_rolled_back = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_multi_tenant_transfer_details
            SET is_rolled_back = CASE
            WHEN temp_is_rolled_back = 0 THEN false
            WHEN temp_is_rolled_back = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_multi_tenant_transfer_details DROP COLUMN temp_is_rolled_back;
        </sql>

    </changeSet>
    <changeSet id="fix_m_organisation_creditbureau_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_organisation_creditbureau'
                AND column_name = 'is_active'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_organisation_creditbureau ADD COLUMN temp_is_active bit varying(1);
        </sql>
        <sql>
            UPDATE m_organisation_creditbureau
            SET temp_is_active = is_active WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_organisation_creditbureau ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_organisation_creditbureau
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = '0' THEN false
            WHEN is_active = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_organisation_creditbureau
            SET is_active = CASE
            WHEN temp_is_active = '0' THEN false
            WHEN temp_is_active = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_organisation_creditbureau DROP COLUMN temp_is_active;
        </sql>
    </changeSet>
    <changeSet id="fix_m_password_validation_policy_column-active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_password_validation_policy'
                AND column_name = 'active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_password_validation_policy ADD COLUMN temp_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_password_validation_policy
            SET temp_active = active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_password_validation_policy ALTER COLUMN active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_password_validation_policy
            ALTER COLUMN active TYPE BOOLEAN
            USING CASE
            WHEN active = 0 THEN false
            WHEN active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_password_validation_policy
            SET active = CASE
            WHEN temp_active = 0 THEN false
            WHEN temp_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_password_validation_policy DROP COLUMN temp_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_payment_type_column-is_system_defined" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_payment_type'
                AND column_name = 'is_system_defined'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_payment_type ADD COLUMN temp_is_system_defined SMALLINT;
        </sql>
        <sql>
            UPDATE m_payment_type
            SET temp_is_system_defined = is_system_defined where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_payment_type ALTER COLUMN is_system_defined DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_payment_type
            ALTER COLUMN is_system_defined TYPE BOOLEAN
            USING CASE
            WHEN is_system_defined = 0 THEN false
            WHEN is_system_defined = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_payment_type
            SET is_system_defined = CASE
            WHEN temp_is_system_defined = 0 THEN false
            WHEN temp_is_system_defined = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_payment_type DROP COLUMN temp_is_system_defined;
        </sql>

    </changeSet>
    <changeSet id="fix_m_portfolio_account_associations_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_portfolio_account_associations'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_portfolio_account_associations ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_portfolio_account_associations
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_portfolio_account_associations ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_portfolio_account_associations
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_portfolio_account_associations
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_portfolio_account_associations DROP COLUMN temp_is_active;
        </sql>

    </changeSet>

    <changeSet id="fix_m_product_loan_column-is_linked_to_floating_interest_rates" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'is_linked_to_floating_interest_rates'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_is_linked_to_floating_interest_rates bit varying(1);
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_is_linked_to_floating_interest_rates = is_linked_to_floating_interest_rates WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN is_linked_to_floating_interest_rates DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN is_linked_to_floating_interest_rates TYPE BOOLEAN
            USING CASE
            WHEN is_linked_to_floating_interest_rates = '0' THEN false
            WHEN is_linked_to_floating_interest_rates = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET is_linked_to_floating_interest_rates = CASE
            WHEN temp_is_linked_to_floating_interest_rates = '0' THEN false
            WHEN temp_is_linked_to_floating_interest_rates = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_is_linked_to_floating_interest_rates;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-allow_variabe_installments" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'allow_variabe_installments'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_allow_variabe_installments bit varying(1);
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_allow_variabe_installments = allow_variabe_installments WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN allow_variabe_installments DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN allow_variabe_installments TYPE BOOLEAN
            USING CASE
            WHEN allow_variabe_installments = '0' THEN false
            WHEN allow_variabe_installments = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET allow_variabe_installments = CASE
            WHEN temp_allow_variabe_installments = '0' THEN false
            WHEN temp_allow_variabe_installments = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_allow_variabe_installments;
        </sql>
    </changeSet>

    <changeSet id="fix_m_product_loan_column-allow_partial_period_interest_calcualtion" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'allow_partial_period_interest_calcualtion'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_allow_partial_period_interest_calcualtion SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_allow_partial_period_interest_calcualtion = allow_partial_period_interest_calcualtion WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN allow_partial_period_interest_calcualtion DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN allow_partial_period_interest_calcualtion TYPE BOOLEAN
            USING CASE
            WHEN allow_partial_period_interest_calcualtion = '0' THEN false
            WHEN allow_partial_period_interest_calcualtion = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET allow_partial_period_interest_calcualtion = CASE
            WHEN temp_allow_partial_period_interest_calcualtion = '0' THEN false
            WHEN temp_allow_partial_period_interest_calcualtion = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_allow_partial_period_interest_calcualtion;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-include_in_borrower_cycle" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'include_in_borrower_cycle'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_include_in_borrower_cycle SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_include_in_borrower_cycle = include_in_borrower_cycle WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN include_in_borrower_cycle DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN include_in_borrower_cycle TYPE BOOLEAN
            USING CASE
            WHEN include_in_borrower_cycle = '0' THEN false
            WHEN include_in_borrower_cycle = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET include_in_borrower_cycle = CASE
            WHEN temp_include_in_borrower_cycle = '0' THEN false
            WHEN temp_include_in_borrower_cycle = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_include_in_borrower_cycle;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-use_borrower_cycle" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'use_borrower_cycle'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_use_borrower_cycle SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_use_borrower_cycle = use_borrower_cycle WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN use_borrower_cycle DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN use_borrower_cycle TYPE BOOLEAN
            USING CASE
            WHEN use_borrower_cycle = '0' THEN false
            WHEN use_borrower_cycle = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET use_borrower_cycle = CASE
            WHEN temp_use_borrower_cycle = '0' THEN false
            WHEN temp_use_borrower_cycle = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_use_borrower_cycle;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-allow_multiple_disbursals" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'allow_multiple_disbursals'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_allow_multiple_disbursals SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_allow_multiple_disbursals = allow_multiple_disbursals WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN allow_multiple_disbursals DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN allow_multiple_disbursals TYPE BOOLEAN
            USING CASE
            WHEN allow_multiple_disbursals = '0' THEN false
            WHEN allow_multiple_disbursals = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET allow_multiple_disbursals = CASE
            WHEN temp_allow_multiple_disbursals = '0' THEN false
            WHEN temp_allow_multiple_disbursals = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_allow_multiple_disbursals;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-interest_recalculation_enabled" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'interest_recalculation_enabled'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_interest_recalculation_enabled SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_interest_recalculation_enabled = interest_recalculation_enabled WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN interest_recalculation_enabled DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN interest_recalculation_enabled TYPE BOOLEAN
            USING CASE
            WHEN interest_recalculation_enabled = '0' THEN false
            WHEN interest_recalculation_enabled = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET interest_recalculation_enabled = CASE
            WHEN temp_interest_recalculation_enabled = '0' THEN false
            WHEN temp_interest_recalculation_enabled = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_interest_recalculation_enabled;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-hold_guarantee_funds" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'hold_guarantee_funds'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_hold_guarantee_funds SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_hold_guarantee_funds = hold_guarantee_funds WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN hold_guarantee_funds DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN hold_guarantee_funds TYPE BOOLEAN
            USING CASE
            WHEN hold_guarantee_funds = '0' THEN false
            WHEN hold_guarantee_funds = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET hold_guarantee_funds = CASE
            WHEN temp_hold_guarantee_funds = '0' THEN false
            WHEN temp_hold_guarantee_funds = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_hold_guarantee_funds;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-account_moves_out_of_npa_only_on_arrears_completion" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'account_moves_out_of_npa_only_on_arrears_completion'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_account_moves_out_of_npa_only_on_arrears_completion SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_account_moves_out_of_npa_only_on_arrears_completion = account_moves_out_of_npa_only_on_arrears_completion WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN account_moves_out_of_npa_only_on_arrears_completion DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN account_moves_out_of_npa_only_on_arrears_completion TYPE BOOLEAN
            USING CASE
            WHEN account_moves_out_of_npa_only_on_arrears_completion = '0' THEN false
            WHEN account_moves_out_of_npa_only_on_arrears_completion = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET account_moves_out_of_npa_only_on_arrears_completion = CASE
            WHEN temp_account_moves_out_of_npa_only_on_arrears_completion = '0' THEN false
            WHEN temp_account_moves_out_of_npa_only_on_arrears_completion = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_account_moves_out_of_npa_only_on_arrears_completion;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-can_define_fixed_emi_amount" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'can_define_fixed_emi_amount'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_can_define_fixed_emi_amount SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_can_define_fixed_emi_amount = can_define_fixed_emi_amount WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN can_define_fixed_emi_amount DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN can_define_fixed_emi_amount TYPE BOOLEAN
            USING CASE
            WHEN can_define_fixed_emi_amount = '0' THEN false
            WHEN can_define_fixed_emi_amount = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET can_define_fixed_emi_amount = CASE
            WHEN temp_can_define_fixed_emi_amount = '0' THEN false
            WHEN temp_can_define_fixed_emi_amount = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_can_define_fixed_emi_amount;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-can_use_for_topup" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'can_use_for_topup'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_can_use_for_topup SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_can_use_for_topup = can_use_for_topup WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN can_use_for_topup DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN can_use_for_topup TYPE BOOLEAN
            USING CASE
            WHEN can_use_for_topup = '0' THEN false
            WHEN can_use_for_topup = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET can_use_for_topup = CASE
            WHEN temp_can_use_for_topup = '0' THEN false
            WHEN temp_can_use_for_topup = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_can_use_for_topup;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-sync_expected_with_disbursement_date" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'sync_expected_with_disbursement_date'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_sync_expected_with_disbursement_date SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_sync_expected_with_disbursement_date = sync_expected_with_disbursement_date WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN sync_expected_with_disbursement_date DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN sync_expected_with_disbursement_date TYPE BOOLEAN
            USING CASE
            WHEN sync_expected_with_disbursement_date = '0' THEN false
            WHEN sync_expected_with_disbursement_date = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET sync_expected_with_disbursement_date = CASE
            WHEN temp_sync_expected_with_disbursement_date = '0' THEN false
            WHEN temp_sync_expected_with_disbursement_date = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_sync_expected_with_disbursement_date;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-is_equal_amortization" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'is_equal_amortization'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_is_equal_amortization SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_is_equal_amortization = is_equal_amortization WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN is_equal_amortization DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN is_equal_amortization TYPE BOOLEAN
            USING CASE
            WHEN is_equal_amortization = '0' THEN false
            WHEN is_equal_amortization = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET is_equal_amortization = CASE
            WHEN temp_is_equal_amortization = '0' THEN false
            WHEN temp_is_equal_amortization = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_is_equal_amortization;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-disallow_expected_disbursements" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'disallow_expected_disbursements'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_disallow_expected_disbursements bit varying(1);
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_disallow_expected_disbursements = disallow_expected_disbursements WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN disallow_expected_disbursements DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN disallow_expected_disbursements TYPE BOOLEAN
            USING CASE
            WHEN disallow_expected_disbursements = '0' THEN false
            WHEN disallow_expected_disbursements = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET disallow_expected_disbursements = CASE
            WHEN temp_disallow_expected_disbursements = '0' THEN false
            WHEN temp_disallow_expected_disbursements = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_disallow_expected_disbursements;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-allow_approved_disbursed_amounts_over_applied" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'allow_approved_disbursed_amounts_over_applied'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_allow_approved_disbursed_amounts_over_applied bit varying(1);
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_allow_approved_disbursed_amounts_over_applied = allow_approved_disbursed_amounts_over_applied WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN allow_approved_disbursed_amounts_over_applied DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN allow_approved_disbursed_amounts_over_applied TYPE BOOLEAN
            USING CASE
            WHEN allow_approved_disbursed_amounts_over_applied = '0' THEN false
            WHEN allow_approved_disbursed_amounts_over_applied = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET allow_approved_disbursed_amounts_over_applied = CASE
            WHEN temp_allow_approved_disbursed_amounts_over_applied = '0' THEN false
            WHEN temp_allow_approved_disbursed_amounts_over_applied = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_allow_approved_disbursed_amounts_over_applied;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_column-enable_down_payment" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'enable_down_payment'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_enable_down_payment SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_enable_down_payment = enable_down_payment where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN enable_down_payment DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN enable_down_payment TYPE BOOLEAN
            USING CASE
            WHEN enable_down_payment = 0 THEN false
            WHEN enable_down_payment = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET enable_down_payment = CASE
            WHEN temp_enable_down_payment = 0 THEN false
            WHEN temp_enable_down_payment = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_enable_down_payment;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_column-enable_installment_level_delinquency" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'enable_installment_level_delinquency'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_enable_installment_level_delinquency SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_enable_installment_level_delinquency = enable_installment_level_delinquency where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN enable_installment_level_delinquency DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN enable_installment_level_delinquency TYPE BOOLEAN
            USING CASE
            WHEN enable_installment_level_delinquency = 0 THEN false
            WHEN enable_installment_level_delinquency = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET enable_installment_level_delinquency = CASE
            WHEN temp_enable_installment_level_delinquency = 0 THEN false
            WHEN temp_enable_installment_level_delinquency = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_enable_installment_level_delinquency;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_column-enable_auto_repayment_for_down_payment" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan'
                AND column_name = 'enable_auto_repayment_for_down_payment'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan ADD COLUMN temp_enable_auto_repayment_for_down_payment SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET temp_enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan ALTER COLUMN enable_auto_repayment_for_down_payment DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan
            ALTER COLUMN enable_auto_repayment_for_down_payment TYPE BOOLEAN
            USING CASE
            WHEN enable_auto_repayment_for_down_payment = 0 THEN false
            WHEN enable_auto_repayment_for_down_payment = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan
            SET enable_auto_repayment_for_down_payment = CASE
            WHEN temp_enable_auto_repayment_for_down_payment = 0 THEN false
            WHEN temp_enable_auto_repayment_for_down_payment = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan DROP COLUMN temp_enable_auto_repayment_for_down_payment;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-amortization_method_enum" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'amortization_method_enum'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_amortization_method_enum SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_amortization_method_enum = amortization_method_enum where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN amortization_method_enum DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN amortization_method_enum TYPE BOOLEAN
            USING CASE
            WHEN amortization_method_enum = 0 THEN false
            WHEN amortization_method_enum = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET amortization_method_enum = CASE
            WHEN temp_amortization_method_enum = 0 THEN false
            WHEN temp_amortization_method_enum = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_amortization_method_enum;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-interest_method_enum" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'interest_method_enum'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_interest_method_enum SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_interest_method_enum = interest_method_enum where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN interest_method_enum DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN interest_method_enum TYPE BOOLEAN
            USING CASE
            WHEN interest_method_enum = 0 THEN false
            WHEN interest_method_enum = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET interest_method_enum = CASE
            WHEN temp_interest_method_enum = 0 THEN false
            WHEN temp_interest_method_enum = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_interest_method_enum;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-loan_transaction_strategy_code" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'loan_transaction_strategy_code'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_loan_transaction_strategy_code SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_loan_transaction_strategy_code = loan_transaction_strategy_code where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN loan_transaction_strategy_code DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN loan_transaction_strategy_code TYPE BOOLEAN
            USING CASE
            WHEN loan_transaction_strategy_code = 0 THEN false
            WHEN loan_transaction_strategy_code = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET loan_transaction_strategy_code = CASE
            WHEN temp_loan_transaction_strategy_code = 0 THEN false
            WHEN temp_loan_transaction_strategy_code = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_loan_transaction_strategy_code;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-interest_calculated_in_period_enum" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'interest_calculated_in_period_enum'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_interest_calculated_in_period_enum SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_interest_calculated_in_period_enum = interest_calculated_in_period_enum where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN interest_calculated_in_period_enum DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN interest_calculated_in_period_enum TYPE BOOLEAN
            USING CASE
            WHEN interest_calculated_in_period_enum = 0 THEN false
            WHEN interest_calculated_in_period_enum = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET interest_calculated_in_period_enum = CASE
            WHEN temp_interest_calculated_in_period_enum = 0 THEN false
            WHEN temp_interest_calculated_in_period_enum = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_interest_calculated_in_period_enum;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-arrearstolerance_amount" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'arrearstolerance_amount'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_arrearstolerance_amount SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_arrearstolerance_amount = arrearstolerance_amount where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN arrearstolerance_amount DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN arrearstolerance_amount TYPE BOOLEAN
            USING CASE
            WHEN arrearstolerance_amount = 0 THEN false
            WHEN arrearstolerance_amount = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET arrearstolerance_amount = CASE
            WHEN temp_arrearstolerance_amount = 0 THEN false
            WHEN temp_arrearstolerance_amount = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_arrearstolerance_amount;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-repay_every" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'repay_every'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_repay_every SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_repay_every = repay_every where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN repay_every DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN repay_every TYPE BOOLEAN
            USING CASE
            WHEN repay_every = 0 THEN false
            WHEN repay_every = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET repay_every = CASE
            WHEN temp_repay_every = 0 THEN false
            WHEN temp_repay_every = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_repay_every;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-moratorium" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'moratorium'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_moratorium SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_moratorium = moratorium where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN moratorium DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN moratorium TYPE BOOLEAN
            USING CASE
            WHEN moratorium = 0 THEN false
            WHEN moratorium = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET moratorium = CASE
            WHEN temp_moratorium = 0 THEN false
            WHEN temp_moratorium = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_moratorium;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_configurable_attributes_column-grace_on_arrears_ageing" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_configurable_attributes'
                AND column_name = 'grace_on_arrears_ageing'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ADD COLUMN temp_grace_on_arrears_ageing SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET temp_grace_on_arrears_ageing = grace_on_arrears_ageing where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes ALTER COLUMN grace_on_arrears_ageing DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes
            ALTER COLUMN grace_on_arrears_ageing TYPE BOOLEAN
            USING CASE
            WHEN grace_on_arrears_ageing = 0 THEN false
            WHEN grace_on_arrears_ageing = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_configurable_attributes
            SET grace_on_arrears_ageing = CASE
            WHEN temp_grace_on_arrears_ageing = 0 THEN false
            WHEN temp_grace_on_arrears_ageing = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_configurable_attributes DROP COLUMN temp_grace_on_arrears_ageing;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_floating_rates_column-is_floating_interest_rate_calculation_allowed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_floating_rates'
                AND column_name = 'is_floating_interest_rate_calculation_allowed'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_floating_rates ADD COLUMN temp_is_floating_interest_rate_calculation_allowed bit varying(1);
        </sql>
        <sql>
            UPDATE m_product_loan_floating_rates
            SET temp_is_floating_interest_rate_calculation_allowed = is_floating_interest_rate_calculation_allowed WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_floating_rates ALTER COLUMN is_floating_interest_rate_calculation_allowed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_floating_rates
            ALTER COLUMN is_floating_interest_rate_calculation_allowed TYPE BOOLEAN
            USING CASE
            WHEN is_floating_interest_rate_calculation_allowed = '0' THEN false
            WHEN is_floating_interest_rate_calculation_allowed = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_floating_rates
            SET is_floating_interest_rate_calculation_allowed = CASE
            WHEN temp_is_floating_interest_rate_calculation_allowed = '0' THEN false
            WHEN temp_is_floating_interest_rate_calculation_allowed = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_floating_rates DROP COLUMN temp_is_floating_interest_rate_calculation_allowed;
        </sql>
    </changeSet>
    <changeSet id="fix_m_product_loan_recalculation_details_column-arrears_based_on_original_schedule" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_recalculation_details'
                AND column_name = 'arrears_based_on_original_schedule'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details ADD COLUMN temp_arrears_based_on_original_schedule SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_recalculation_details
            SET temp_arrears_based_on_original_schedule = arrears_based_on_original_schedule where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details ALTER COLUMN arrears_based_on_original_schedule DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details
            ALTER COLUMN arrears_based_on_original_schedule TYPE BOOLEAN
            USING CASE
            WHEN arrears_based_on_original_schedule = 0 THEN false
            WHEN arrears_based_on_original_schedule = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_recalculation_details
            SET arrears_based_on_original_schedule = CASE
            WHEN temp_arrears_based_on_original_schedule = 0 THEN false
            WHEN temp_arrears_based_on_original_schedule = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details DROP COLUMN temp_arrears_based_on_original_schedule;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_recalculation_details_column-is_compounding_to_be_posted_as_transaction" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_recalculation_details'
                AND column_name = 'is_compounding_to_be_posted_as_transaction'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details ADD COLUMN temp_is_compounding_to_be_posted_as_transaction SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_recalculation_details
            SET temp_is_compounding_to_be_posted_as_transaction = is_compounding_to_be_posted_as_transaction where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details ALTER COLUMN is_compounding_to_be_posted_as_transaction DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details
            ALTER COLUMN is_compounding_to_be_posted_as_transaction TYPE BOOLEAN
            USING CASE
            WHEN is_compounding_to_be_posted_as_transaction = 0 THEN false
            WHEN is_compounding_to_be_posted_as_transaction = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_recalculation_details
            SET is_compounding_to_be_posted_as_transaction = CASE
            WHEN temp_is_compounding_to_be_posted_as_transaction = 0 THEN false
            WHEN temp_is_compounding_to_be_posted_as_transaction = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details DROP COLUMN temp_is_compounding_to_be_posted_as_transaction;
        </sql>

    </changeSet>
    <changeSet id="fix_m_product_loan_recalculation_details_column-allow_compounding_on_eod" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_product_loan_recalculation_details'
                AND column_name = 'allow_compounding_on_eod'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details ADD COLUMN temp_allow_compounding_on_eod SMALLINT;
        </sql>
        <sql>
            UPDATE m_product_loan_recalculation_details
            SET temp_allow_compounding_on_eod = allow_compounding_on_eod where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details ALTER COLUMN allow_compounding_on_eod DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details
            ALTER COLUMN allow_compounding_on_eod TYPE BOOLEAN
            USING CASE
            WHEN allow_compounding_on_eod = 0 THEN false
            WHEN allow_compounding_on_eod = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_product_loan_recalculation_details
            SET allow_compounding_on_eod = CASE
            WHEN temp_allow_compounding_on_eod = 0 THEN false
            WHEN temp_allow_compounding_on_eod = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_product_loan_recalculation_details DROP COLUMN temp_allow_compounding_on_eod;
        </sql>

    </changeSet>
    <changeSet id="fix_m_provisioning_history_column-journal_entry_created" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_provisioning_history'
                AND column_name = 'journal_entry_created'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_provisioning_history ADD COLUMN temp_journal_entry_created bit varying(1);
        </sql>
        <sql>
            UPDATE m_provisioning_history
            SET temp_journal_entry_created = journal_entry_created WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_provisioning_history ALTER COLUMN journal_entry_created DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_provisioning_history
            ALTER COLUMN journal_entry_created TYPE BOOLEAN
            USING CASE
            WHEN journal_entry_created = '0' THEN false
            WHEN journal_entry_created = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_provisioning_history
            SET journal_entry_created = CASE
            WHEN temp_journal_entry_created = '0' THEN false
            WHEN temp_journal_entry_created = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_provisioning_history DROP COLUMN temp_journal_entry_created;
        </sql>
    </changeSet>
    <changeSet id="fix_m_rate_column-active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_rate'
                AND column_name = 'active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_rate ADD COLUMN temp_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_rate
            SET temp_active = active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_rate ALTER COLUMN active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_rate
            ALTER COLUMN active TYPE BOOLEAN
            USING CASE
            WHEN active = 0 THEN false
            WHEN active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_rate
            SET active = CASE
            WHEN temp_active = 0 THEN false
            WHEN temp_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_rate DROP COLUMN temp_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_report_mailing_job_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_report_mailing_job'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_report_mailing_job ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_report_mailing_job
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_report_mailing_job ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_report_mailing_job
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_report_mailing_job
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_report_mailing_job DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_report_mailing_job_column-is_deleted" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_report_mailing_job'
                AND column_name = 'is_deleted'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_report_mailing_job ADD COLUMN temp_is_deleted SMALLINT;
        </sql>
        <sql>
            UPDATE m_report_mailing_job
            SET temp_is_deleted = is_deleted where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_report_mailing_job ALTER COLUMN is_deleted DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_report_mailing_job
            ALTER COLUMN is_deleted TYPE BOOLEAN
            USING CASE
            WHEN is_deleted = 0 THEN false
            WHEN is_deleted = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_report_mailing_job
            SET is_deleted = CASE
            WHEN temp_is_deleted = 0 THEN false
            WHEN temp_is_deleted = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_report_mailing_job DROP COLUMN temp_is_deleted;
        </sql>

    </changeSet>
    <changeSet id="fix_m_role_column-is_disabled" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_role'
                AND column_name = 'is_disabled'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_role ADD COLUMN temp_is_disabled SMALLINT;
        </sql>
        <sql>
            UPDATE m_role
            SET temp_is_disabled = is_disabled where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_role ALTER COLUMN is_disabled DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_role
            ALTER COLUMN is_disabled TYPE BOOLEAN
            USING CASE
            WHEN is_disabled = 0 THEN false
            WHEN is_disabled = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_role
            SET is_disabled = CASE
            WHEN temp_is_disabled = 0 THEN false
            WHEN temp_is_disabled = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_role DROP COLUMN temp_is_disabled;
        </sql>

    </changeSet>



    <changeSet id="fix_m_savings_account_column-withdrawal_fee_for_transfer" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account'
                AND column_name = 'withdrawal_fee_for_transfer'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account ADD COLUMN temp_withdrawal_fee_for_transfer SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET temp_withdrawal_fee_for_transfer = withdrawal_fee_for_transfer where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account ALTER COLUMN withdrawal_fee_for_transfer DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account
            ALTER COLUMN withdrawal_fee_for_transfer TYPE BOOLEAN
            USING CASE
            WHEN withdrawal_fee_for_transfer = 0 THEN false
            WHEN withdrawal_fee_for_transfer = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET withdrawal_fee_for_transfer = CASE
            WHEN temp_withdrawal_fee_for_transfer = 0 THEN false
            WHEN temp_withdrawal_fee_for_transfer = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account DROP COLUMN temp_withdrawal_fee_for_transfer;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_column-allow_overdraft" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account'
                AND column_name = 'allow_overdraft'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account ADD COLUMN temp_allow_overdraft SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET temp_allow_overdraft = allow_overdraft where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account ALTER COLUMN allow_overdraft DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account
            ALTER COLUMN allow_overdraft TYPE BOOLEAN
            USING CASE
            WHEN allow_overdraft = 0 THEN false
            WHEN allow_overdraft = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET allow_overdraft = CASE
            WHEN temp_allow_overdraft = 0 THEN false
            WHEN temp_allow_overdraft = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account DROP COLUMN temp_allow_overdraft;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_column-enforce_min_required_balance" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account'
                AND column_name = 'enforce_min_required_balance'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account ADD COLUMN temp_enforce_min_required_balance SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET temp_enforce_min_required_balance = enforce_min_required_balance where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account ALTER COLUMN enforce_min_required_balance DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account
            ALTER COLUMN enforce_min_required_balance TYPE BOOLEAN
            USING CASE
            WHEN enforce_min_required_balance = 0 THEN false
            WHEN enforce_min_required_balance = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET enforce_min_required_balance = CASE
            WHEN temp_enforce_min_required_balance = 0 THEN false
            WHEN temp_enforce_min_required_balance = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account DROP COLUMN temp_enforce_min_required_balance;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_column-withhold_tax" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account'
                AND column_name = 'withhold_tax'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account ADD COLUMN temp_withhold_tax SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET temp_withhold_tax = withhold_tax where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account ALTER COLUMN withhold_tax DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account
            ALTER COLUMN withhold_tax TYPE BOOLEAN
            USING CASE
            WHEN withhold_tax = 0 THEN false
            WHEN withhold_tax = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET withhold_tax = CASE
            WHEN temp_withhold_tax = 0 THEN false
            WHEN temp_withhold_tax = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account DROP COLUMN temp_withhold_tax;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_column-is_lien_allowed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account'
                AND column_name = 'is_lien_allowed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account ADD COLUMN temp_is_lien_allowed SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET temp_is_lien_allowed = is_lien_allowed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account ALTER COLUMN is_lien_allowed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account
            ALTER COLUMN is_lien_allowed TYPE BOOLEAN
            USING CASE
            WHEN is_lien_allowed = 0 THEN false
            WHEN is_lien_allowed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account
            SET is_lien_allowed = CASE
            WHEN temp_is_lien_allowed = 0 THEN false
            WHEN temp_is_lien_allowed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account DROP COLUMN temp_is_lien_allowed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_charge_column-is_penalty" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_charge'
                AND column_name = 'is_penalty'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_charge ADD COLUMN temp_is_penalty SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET temp_is_penalty = is_penalty where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge ALTER COLUMN is_penalty DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge
            ALTER COLUMN is_penalty TYPE BOOLEAN
            USING CASE
            WHEN is_penalty = 0 THEN false
            WHEN is_penalty = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET is_penalty = CASE
            WHEN temp_is_penalty = 0 THEN false
            WHEN temp_is_penalty = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge DROP COLUMN temp_is_penalty;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_charge_column-is_paid_derived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_charge'
                AND column_name = 'is_paid_derived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_charge ADD COLUMN temp_is_paid_derived SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET temp_is_paid_derived = is_paid_derived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge ALTER COLUMN is_paid_derived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge
            ALTER COLUMN is_paid_derived TYPE BOOLEAN
            USING CASE
            WHEN is_paid_derived = 0 THEN false
            WHEN is_paid_derived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET is_paid_derived = CASE
            WHEN temp_is_paid_derived = 0 THEN false
            WHEN temp_is_paid_derived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge DROP COLUMN temp_is_paid_derived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_charge_column-waived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_charge'
                AND column_name = 'waived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_charge ADD COLUMN temp_waived SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET temp_waived = waived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge ALTER COLUMN waived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge
            ALTER COLUMN waived TYPE BOOLEAN
            USING CASE
            WHEN waived = 0 THEN false
            WHEN waived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET waived = CASE
            WHEN temp_waived = 0 THEN false
            WHEN temp_waived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge DROP COLUMN temp_waived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_charge_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_charge'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_charge ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_charge
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_charge DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_interest_rate_chart_column-is_primary_grouping_by_amount" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_interest_rate_chart'
                AND column_name = 'is_primary_grouping_by_amount'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_interest_rate_chart ADD COLUMN temp_is_primary_grouping_by_amount SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account_interest_rate_chart
            SET temp_is_primary_grouping_by_amount = is_primary_grouping_by_amount where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_interest_rate_chart ALTER COLUMN is_primary_grouping_by_amount DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_interest_rate_chart
            ALTER COLUMN is_primary_grouping_by_amount TYPE BOOLEAN
            USING CASE
            WHEN is_primary_grouping_by_amount = 0 THEN false
            WHEN is_primary_grouping_by_amount = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_interest_rate_chart
            SET is_primary_grouping_by_amount = CASE
            WHEN temp_is_primary_grouping_by_amount = 0 THEN false
            WHEN temp_is_primary_grouping_by_amount = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_interest_rate_chart DROP COLUMN temp_is_primary_grouping_by_amount;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_transaction_column-is_reversed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_transaction'
                AND column_name = 'is_reversed'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_transaction ADD COLUMN temp_is_reversed SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET temp_is_reversed = is_reversed where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction ALTER COLUMN is_reversed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction
            ALTER COLUMN is_reversed TYPE BOOLEAN
            USING CASE
            WHEN is_reversed = 0 THEN false
            WHEN is_reversed = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET is_reversed = CASE
            WHEN temp_is_reversed = 0 THEN false
            WHEN temp_is_reversed = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction DROP COLUMN temp_is_reversed;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_transaction_column-is_manual" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_transaction'
                AND column_name = 'is_manual'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_transaction ADD COLUMN temp_is_manual SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET temp_is_manual = is_manual where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction ALTER COLUMN is_manual DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction
            ALTER COLUMN is_manual TYPE BOOLEAN
            USING CASE
            WHEN is_manual = 0 THEN false
            WHEN is_manual = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET is_manual = CASE
            WHEN temp_is_manual = 0 THEN false
            WHEN temp_is_manual = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction DROP COLUMN temp_is_manual;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_account_transaction_column-is_reversal" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_transaction'
                AND column_name = 'is_reversal'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_transaction ADD COLUMN temp_is_reversal bit varying(1);
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET temp_is_reversal = is_reversal WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction ALTER COLUMN is_reversal DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction
            ALTER COLUMN is_reversal TYPE BOOLEAN
            USING CASE
            WHEN is_reversal = '0' THEN false
            WHEN is_reversal = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET is_reversal = CASE
            WHEN temp_is_reversal = '0' THEN false
            WHEN temp_is_reversal = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction DROP COLUMN temp_is_reversal;
        </sql>
    </changeSet>
    <changeSet id="fix_m_savings_account_transaction_column-is_lien_transaction" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_transaction'
                AND column_name = 'is_lien_transaction'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_transaction ADD COLUMN temp_is_lien_transaction bit varying(1);
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET temp_is_lien_transaction = is_lien_transaction WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction ALTER COLUMN is_lien_transaction DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction
            ALTER COLUMN is_lien_transaction TYPE BOOLEAN
            USING CASE
            WHEN is_lien_transaction = '0' THEN false
            WHEN is_lien_transaction = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET is_lien_transaction = CASE
            WHEN temp_is_lien_transaction = '0' THEN false
            WHEN temp_is_lien_transaction = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction DROP COLUMN temp_is_lien_transaction;
        </sql>
    </changeSet>
    <changeSet id="fix_m_savings_account_transaction_column-is_loan_disbursement" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_account_transaction'
                AND column_name = 'is_loan_disbursement'
                AND data_type = 'bigint';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_account_transaction ADD COLUMN temp_is_loan_disbursement BIGINT;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET temp_is_loan_disbursement = is_loan_disbursement WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction ALTER COLUMN is_loan_disbursement DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction
            ALTER COLUMN is_loan_disbursement TYPE BOOLEAN
            USING CASE
            WHEN is_loan_disbursement = 0 THEN false
            WHEN is_loan_disbursement = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_account_transaction
            SET is_loan_disbursement = CASE
            WHEN temp_is_loan_disbursement = 0 THEN false
            WHEN temp_is_loan_disbursement = 1 THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_account_transaction DROP COLUMN temp_is_loan_disbursement;
        </sql>
    </changeSet>
    <changeSet id="fix_m_savings_product_column-withdrawal_fee_for_transfer" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_product'
                AND column_name = 'withdrawal_fee_for_transfer'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_product ADD COLUMN temp_withdrawal_fee_for_transfer SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET temp_withdrawal_fee_for_transfer = withdrawal_fee_for_transfer where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product ALTER COLUMN withdrawal_fee_for_transfer DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_product
            ALTER COLUMN withdrawal_fee_for_transfer TYPE BOOLEAN
            USING CASE
            WHEN withdrawal_fee_for_transfer = 0 THEN false
            WHEN withdrawal_fee_for_transfer = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET withdrawal_fee_for_transfer = CASE
            WHEN temp_withdrawal_fee_for_transfer = 0 THEN false
            WHEN temp_withdrawal_fee_for_transfer = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product DROP COLUMN temp_withdrawal_fee_for_transfer;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_product_column-allow_overdraft" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_product'
                AND column_name = 'allow_overdraft'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_product ADD COLUMN temp_allow_overdraft SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET temp_allow_overdraft = allow_overdraft where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product ALTER COLUMN allow_overdraft DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_product
            ALTER COLUMN allow_overdraft TYPE BOOLEAN
            USING CASE
            WHEN allow_overdraft = 0 THEN false
            WHEN allow_overdraft = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET allow_overdraft = CASE
            WHEN temp_allow_overdraft = 0 THEN false
            WHEN temp_allow_overdraft = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product DROP COLUMN temp_allow_overdraft;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_product_column-enforce_min_required_balance" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_product'
                AND column_name = 'enforce_min_required_balance'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_product ADD COLUMN temp_enforce_min_required_balance SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET temp_enforce_min_required_balance = enforce_min_required_balance where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product ALTER COLUMN enforce_min_required_balance DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_product
            ALTER COLUMN enforce_min_required_balance TYPE BOOLEAN
            USING CASE
            WHEN enforce_min_required_balance = 0 THEN false
            WHEN enforce_min_required_balance = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET enforce_min_required_balance = CASE
            WHEN temp_enforce_min_required_balance = 0 THEN false
            WHEN temp_enforce_min_required_balance = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product DROP COLUMN temp_enforce_min_required_balance;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_product_column-withhold_tax" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_product'
                AND column_name = 'withhold_tax'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_product ADD COLUMN temp_withhold_tax SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET temp_withhold_tax = withhold_tax where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product ALTER COLUMN withhold_tax DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_product
            ALTER COLUMN withhold_tax TYPE BOOLEAN
            USING CASE
            WHEN withhold_tax = 0 THEN false
            WHEN withhold_tax = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET withhold_tax = CASE
            WHEN temp_withhold_tax = 0 THEN false
            WHEN temp_withhold_tax = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product DROP COLUMN temp_withhold_tax;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_product_column-is_dormancy_tracking_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_product'
                AND column_name = 'is_dormancy_tracking_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_product ADD COLUMN temp_is_dormancy_tracking_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET temp_is_dormancy_tracking_active = is_dormancy_tracking_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product ALTER COLUMN is_dormancy_tracking_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_product
            ALTER COLUMN is_dormancy_tracking_active TYPE BOOLEAN
            USING CASE
            WHEN is_dormancy_tracking_active = 0 THEN false
            WHEN is_dormancy_tracking_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET is_dormancy_tracking_active = CASE
            WHEN temp_is_dormancy_tracking_active = 0 THEN false
            WHEN temp_is_dormancy_tracking_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product DROP COLUMN temp_is_dormancy_tracking_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_savings_product_column-is_lien_allowed" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_savings_product'
                AND column_name = 'is_lien_allowed'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_savings_product ADD COLUMN temp_is_lien_allowed bit varying(1);
        </sql>
        <sql>
            UPDATE m_savings_product
            SET temp_is_lien_allowed = is_lien_allowed WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product ALTER COLUMN is_lien_allowed DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_savings_product
            ALTER COLUMN is_lien_allowed TYPE BOOLEAN
            USING CASE
            WHEN is_lien_allowed = '0' THEN false
            WHEN is_lien_allowed = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_savings_product
            SET is_lien_allowed = CASE
            WHEN temp_is_lien_allowed = '0' THEN false
            WHEN temp_is_lien_allowed = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_savings_product DROP COLUMN temp_is_lien_allowed;
        </sql>
    </changeSet>
    <changeSet id="fix_m_selfservice_beneficiaries_tpt_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_selfservice_beneficiaries_tpt'
                AND column_name = 'is_active'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_selfservice_beneficiaries_tpt ADD COLUMN temp_is_active bit varying(1);
        </sql>
        <sql>
            UPDATE m_selfservice_beneficiaries_tpt
            SET temp_is_active = is_active WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_selfservice_beneficiaries_tpt ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_selfservice_beneficiaries_tpt
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = '0' THEN false
            WHEN is_active = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE m_selfservice_beneficiaries_tpt
            SET is_active = CASE
            WHEN temp_is_active = '0' THEN false
            WHEN temp_is_active = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE m_selfservice_beneficiaries_tpt DROP COLUMN temp_is_active;
        </sql>
    </changeSet>
    <changeSet id="fix_m_share_account_column-allow_dividends_inactive_clients" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_share_account'
                AND column_name = 'allow_dividends_inactive_clients'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_share_account ADD COLUMN temp_allow_dividends_inactive_clients SMALLINT;
        </sql>
        <sql>
            UPDATE m_share_account
            SET temp_allow_dividends_inactive_clients = allow_dividends_inactive_clients where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account ALTER COLUMN allow_dividends_inactive_clients DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_share_account
            ALTER COLUMN allow_dividends_inactive_clients TYPE BOOLEAN
            USING CASE
            WHEN allow_dividends_inactive_clients = 0 THEN false
            WHEN allow_dividends_inactive_clients = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_share_account
            SET allow_dividends_inactive_clients = CASE
            WHEN temp_allow_dividends_inactive_clients = 0 THEN false
            WHEN temp_allow_dividends_inactive_clients = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account DROP COLUMN temp_allow_dividends_inactive_clients;
        </sql>

    </changeSet>
    <changeSet id="fix_m_share_account_charge_column-is_paid_derived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_share_account_charge'
                AND column_name = 'is_paid_derived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_share_account_charge ADD COLUMN temp_is_paid_derived SMALLINT;
        </sql>
        <sql>
            UPDATE m_share_account_charge
            SET temp_is_paid_derived = is_paid_derived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge ALTER COLUMN is_paid_derived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge
            ALTER COLUMN is_paid_derived TYPE BOOLEAN
            USING CASE
            WHEN is_paid_derived = 0 THEN false
            WHEN is_paid_derived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_share_account_charge
            SET is_paid_derived = CASE
            WHEN temp_is_paid_derived = 0 THEN false
            WHEN temp_is_paid_derived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge DROP COLUMN temp_is_paid_derived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_share_account_charge_column-waived" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_share_account_charge'
                AND column_name = 'waived'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_share_account_charge ADD COLUMN temp_waived SMALLINT;
        </sql>
        <sql>
            UPDATE m_share_account_charge
            SET temp_waived = waived where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge ALTER COLUMN waived DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge
            ALTER COLUMN waived TYPE BOOLEAN
            USING CASE
            WHEN waived = 0 THEN false
            WHEN waived = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_share_account_charge
            SET waived = CASE
            WHEN temp_waived = 0 THEN false
            WHEN temp_waived = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge DROP COLUMN temp_waived;
        </sql>

    </changeSet>
    <changeSet id="fix_m_share_account_charge_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_share_account_charge'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_share_account_charge ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_share_account_charge
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_share_account_charge
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_charge DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_share_account_transactions_column-is_active" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_share_account_transactions'
                AND column_name = 'is_active'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_share_account_transactions ADD COLUMN temp_is_active SMALLINT;
        </sql>
        <sql>
            UPDATE m_share_account_transactions
            SET temp_is_active = is_active where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_transactions ALTER COLUMN is_active DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_share_account_transactions
            ALTER COLUMN is_active TYPE BOOLEAN
            USING CASE
            WHEN is_active = 0 THEN false
            WHEN is_active = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_share_account_transactions
            SET is_active = CASE
            WHEN temp_is_active = 0 THEN false
            WHEN temp_is_active = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_account_transactions DROP COLUMN temp_is_active;
        </sql>

    </changeSet>
    <changeSet id="fix_m_share_product_column-allow_dividends_inactive_clients" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_share_product'
                AND column_name = 'allow_dividends_inactive_clients'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_share_product ADD COLUMN temp_allow_dividends_inactive_clients SMALLINT;
        </sql>
        <sql>
            UPDATE m_share_product
            SET temp_allow_dividends_inactive_clients = allow_dividends_inactive_clients where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_product ALTER COLUMN allow_dividends_inactive_clients DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_share_product
            ALTER COLUMN allow_dividends_inactive_clients TYPE BOOLEAN
            USING CASE
            WHEN allow_dividends_inactive_clients = 0 THEN false
            WHEN allow_dividends_inactive_clients = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_share_product
            SET allow_dividends_inactive_clients = CASE
            WHEN temp_allow_dividends_inactive_clients = 0 THEN false
            WHEN temp_allow_dividends_inactive_clients = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_share_product DROP COLUMN temp_allow_dividends_inactive_clients;
        </sql>

    </changeSet>
    <changeSet id="fix_m_working_days_column-extend_term_daily_repayments" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_working_days'
                AND column_name = 'extend_term_daily_repayments'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_working_days ADD COLUMN temp_extend_term_daily_repayments SMALLINT;
        </sql>
        <sql>
            UPDATE m_working_days
            SET temp_extend_term_daily_repayments = extend_term_daily_repayments where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_working_days ALTER COLUMN extend_term_daily_repayments DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_working_days
            ALTER COLUMN extend_term_daily_repayments TYPE BOOLEAN
            USING CASE
            WHEN extend_term_daily_repayments = 0 THEN false
            WHEN extend_term_daily_repayments = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_working_days
            SET extend_term_daily_repayments = CASE
            WHEN temp_extend_term_daily_repayments = 0 THEN false
            WHEN temp_extend_term_daily_repayments = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_working_days DROP COLUMN temp_extend_term_daily_repayments;
        </sql>

    </changeSet>
    <changeSet id="fix_m_working_days_column-extend_term_holiday_repayment" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'm_working_days'
                AND column_name = 'extend_term_holiday_repayment'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE m_working_days ADD COLUMN temp_extend_term_holiday_repayment SMALLINT;
        </sql>
        <sql>
            UPDATE m_working_days
            SET temp_extend_term_holiday_repayment = extend_term_holiday_repayment where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_working_days ALTER COLUMN extend_term_holiday_repayment DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE m_working_days
            ALTER COLUMN extend_term_holiday_repayment TYPE BOOLEAN
            USING CASE
            WHEN extend_term_holiday_repayment = 0 THEN false
            WHEN extend_term_holiday_repayment = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE m_working_days
            SET extend_term_holiday_repayment = CASE
            WHEN temp_extend_term_holiday_repayment = 0 THEN false
            WHEN temp_extend_term_holiday_repayment = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE m_working_days DROP COLUMN temp_extend_term_holiday_repayment;
        </sql>

    </changeSet>
    <changeSet id="fix_mix_taxonomy_column-need_mapping" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'mix_taxonomy'
                AND column_name = 'need_mapping'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE mix_taxonomy ADD COLUMN temp_need_mapping SMALLINT;
        </sql>
        <sql>
            UPDATE mix_taxonomy
            SET temp_need_mapping = need_mapping where id > 0;
        </sql>
        <sql>
            ALTER TABLE mix_taxonomy ALTER COLUMN need_mapping DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE mix_taxonomy
            ALTER COLUMN need_mapping TYPE BOOLEAN
            USING CASE
            WHEN need_mapping = 0 THEN false
            WHEN need_mapping = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE mix_taxonomy
            SET need_mapping = CASE
            WHEN temp_need_mapping = 0 THEN false
            WHEN temp_need_mapping = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE mix_taxonomy DROP COLUMN temp_need_mapping;
        </sql>

    </changeSet>
    <changeSet id="fix_oauth_client_details_column-autoapprove" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'oauth_client_details'
                AND column_name = 'autoapprove'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE oauth_client_details ADD COLUMN temp_autoapprove bit varying(1);
        </sql>
        <sql>
            UPDATE oauth_client_details
            SET temp_autoapprove = autoapprove;
        </sql>
        <sql>
            ALTER TABLE oauth_client_details ALTER COLUMN autoapprove DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE oauth_client_details
            ALTER COLUMN autoapprove TYPE BOOLEAN
            USING CASE
            WHEN autoapprove = '0' THEN false
            WHEN autoapprove = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE oauth_client_details
            SET autoapprove = CASE
            WHEN temp_autoapprove = '0' THEN false
            WHEN temp_autoapprove = '1' THEN true
            END;
        </sql>
        <sql>
            ALTER TABLE oauth_client_details DROP COLUMN temp_autoapprove;
        </sql>
    </changeSet>
    <changeSet id="fix_scheduled_email_campaign_column-is_visible" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'scheduled_email_campaign'
                AND column_name = 'is_visible'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE scheduled_email_campaign ADD COLUMN temp_is_visible SMALLINT;
        </sql>
        <sql>
            UPDATE scheduled_email_campaign
            SET temp_is_visible = is_visible;
        </sql>
        <sql>
            ALTER TABLE scheduled_email_campaign ALTER COLUMN is_visible DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE scheduled_email_campaign
            ALTER COLUMN is_visible TYPE BOOLEAN
            USING CASE
            WHEN is_visible = 0 THEN false
            WHEN is_visible = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE scheduled_email_campaign
            SET is_visible = CASE
            WHEN temp_is_visible = 0 THEN false
            WHEN temp_is_visible = 1 THEN true
            END;
        </sql>
        <sql>
            ALTER TABLE scheduled_email_campaign DROP COLUMN temp_is_visible;
        </sql>

    </changeSet>
    <changeSet id="fix_scheduler_detail_column-is_suspended" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'scheduler_detail'
                AND column_name = 'is_suspended'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE scheduler_detail ADD COLUMN temp_is_suspended SMALLINT;
        </sql>
        <sql>
            UPDATE scheduler_detail
            SET temp_is_suspended = is_suspended where id > 0;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail ALTER COLUMN is_suspended DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail
            ALTER COLUMN is_suspended TYPE BOOLEAN
            USING CASE
            WHEN is_suspended = 0 THEN false
            WHEN is_suspended = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE scheduler_detail
            SET is_suspended = CASE
            WHEN temp_is_suspended = 0 THEN false
            WHEN temp_is_suspended = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail DROP COLUMN temp_is_suspended;
        </sql>

    </changeSet>
    <changeSet id="fix_scheduler_detail_column-execute_misfired_jobs" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'scheduler_detail'
                AND column_name = 'execute_misfired_jobs'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE scheduler_detail ADD COLUMN temp_execute_misfired_jobs SMALLINT;
        </sql>
        <sql>
            UPDATE scheduler_detail
            SET temp_execute_misfired_jobs = execute_misfired_jobs where id > 0;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail ALTER COLUMN execute_misfired_jobs DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail
            ALTER COLUMN execute_misfired_jobs TYPE BOOLEAN
            USING CASE
            WHEN execute_misfired_jobs = 0 THEN false
            WHEN execute_misfired_jobs = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE scheduler_detail
            SET execute_misfired_jobs = CASE
            WHEN temp_execute_misfired_jobs = 0 THEN false
            WHEN temp_execute_misfired_jobs = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail DROP COLUMN temp_execute_misfired_jobs;
        </sql>

    </changeSet>
    <changeSet id="fix_scheduler_detail_column-reset_scheduler_on_bootup" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'scheduler_detail'
                AND column_name = 'reset_scheduler_on_bootup'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE scheduler_detail ADD COLUMN temp_reset_scheduler_on_bootup SMALLINT;
        </sql>
        <sql>
            UPDATE scheduler_detail
            SET temp_reset_scheduler_on_bootup = reset_scheduler_on_bootup where id > 0;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail ALTER COLUMN reset_scheduler_on_bootup DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail
            ALTER COLUMN reset_scheduler_on_bootup TYPE BOOLEAN
            USING CASE
            WHEN reset_scheduler_on_bootup = 0 THEN false
            WHEN reset_scheduler_on_bootup = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE scheduler_detail
            SET reset_scheduler_on_bootup = CASE
            WHEN temp_reset_scheduler_on_bootup = 0 THEN false
            WHEN temp_reset_scheduler_on_bootup = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE scheduler_detail DROP COLUMN temp_reset_scheduler_on_bootup;
        </sql>

    </changeSet>
    <changeSet id="fix_sms_campaign_column-is_visible" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'sms_campaign'
                AND column_name = 'is_visible'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE sms_campaign ADD COLUMN temp_is_visible SMALLINT;
        </sql>
        <sql>
            UPDATE sms_campaign
            SET temp_is_visible = is_visible where id > 0;
        </sql>
        <sql>
            ALTER TABLE sms_campaign ALTER COLUMN is_visible DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE sms_campaign
            ALTER COLUMN is_visible TYPE BOOLEAN
            USING CASE
            WHEN is_visible = 0 THEN false
            WHEN is_visible = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE sms_campaign
            SET is_visible = CASE
            WHEN temp_is_visible = 0 THEN false
            WHEN temp_is_visible = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE sms_campaign DROP COLUMN temp_is_visible;
        </sql>

    </changeSet>
    <changeSet id="fix_sms_campaign_column-is_notification" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'sms_campaign'
                AND column_name = 'is_notification'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE sms_campaign ADD COLUMN temp_is_notification SMALLINT;
        </sql>
        <sql>
            UPDATE sms_campaign
            SET temp_is_notification = is_notification where id > 0;
        </sql>
        <sql>
            ALTER TABLE sms_campaign ALTER COLUMN is_notification DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE sms_campaign
            ALTER COLUMN is_notification TYPE BOOLEAN
            USING CASE
            WHEN is_notification = 0 THEN false
            WHEN is_notification = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE sms_campaign
            SET is_notification = CASE
            WHEN temp_is_notification = 0 THEN false
            WHEN temp_is_notification = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE sms_campaign DROP COLUMN temp_is_notification;
        </sql>

    </changeSet>
    <changeSet id="fix_sms_messages_outbound_column-is_notification" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'sms_messages_outbound'
                AND column_name = 'is_notification'
                AND data_type = 'smallint'
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE sms_messages_outbound ADD COLUMN temp_is_notification SMALLINT;
        </sql>
        <sql>
            UPDATE sms_messages_outbound
            SET temp_is_notification = is_notification where id > 0;
        </sql>
        <sql>
            ALTER TABLE sms_messages_outbound ALTER COLUMN is_notification DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE sms_messages_outbound
            ALTER COLUMN is_notification TYPE BOOLEAN
            USING CASE
            WHEN is_notification = 0 THEN false
            WHEN is_notification = 1 THEN true
            END;
        </sql>
        <sql>
            UPDATE sms_messages_outbound
            SET is_notification = CASE
            WHEN temp_is_notification = 0 THEN false
            WHEN temp_is_notification = 1 THEN true
            END  where id > 0;
        </sql>
        <sql>
            ALTER TABLE sms_messages_outbound DROP COLUMN temp_is_notification;
        </sql>

    </changeSet>
    <changeSet id="fix_twofactor_access_token_column-enabled" author="bosco@fiter.io" context="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.columns
                WHERE table_name = 'twofactor_access_token'
                AND column_name = 'enabled'
                AND data_type = 'bit varying'
                AND character_maximum_length = 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE twofactor_access_token ADD COLUMN temp_enabled bit varying(1);
        </sql>
        <sql>
            UPDATE twofactor_access_token
            SET temp_enabled = enabled WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE twofactor_access_token ALTER COLUMN enabled DROP DEFAULT;
        </sql>
        <sql>
            ALTER TABLE twofactor_access_token
            ALTER COLUMN enabled TYPE BOOLEAN
            USING CASE
            WHEN enabled = '0' THEN false
            WHEN enabled = '1' THEN true
            END;
        </sql>
        <sql>
            UPDATE twofactor_access_token
            SET enabled = CASE
            WHEN temp_enabled = '0' THEN false
            WHEN temp_enabled = '1' THEN true
            END WHERE id > 0;
        </sql>
        <sql>
            ALTER TABLE twofactor_access_token DROP COLUMN temp_enabled;
        </sql>
    </changeSet>

</databaseChangeLog>
